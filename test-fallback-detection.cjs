/**
 * –î–ï–¢–ï–ö–¢–û–† FALLBACK –û–¢–í–ï–¢–û–í
 * –ù–∞–π–¥–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–µ—Ç fallback –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
 */

async function testFallbackDetection() {
  console.log('üîç –î–ï–¢–ï–ö–¢–û–† FALLBACK –û–¢–í–ï–¢–û–í');
  console.log('='.repeat(50));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º conversation-engine –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú CONVERSATION-ENGINE...');
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    const testQuery = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç";
    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testQuery}"`);
    
    if (conversationEngine.generateResponse) {
      const result = await conversationEngine.generateResponse(testQuery, {
        sessionId: 'test-session',
        userId: 1
      });
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ CONVERSATION-ENGINE:');
      console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', result?.provider || '–ù–ï –£–ö–ê–ó–ê–ù');
      console.log('‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', result?.response?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
      console.log('‚úÖ –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤:', result?.response?.substring(0, 150) || '–ü–£–°–¢–û–ô –û–¢–í–ï–¢');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ fallback –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const response = result?.response || '';
      const isFallback = 
        response.includes('–ë–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑') ||
        response.includes('—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π') ||
        response.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ') ||
        response.includes('–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å') ||
        response.length < 50;
        
      console.log('üéØ –≠—Ç–æ fallback?:', isFallback ? 'üö® –î–ê!' : '‚úÖ –ù–ï–¢');
      
      if (isFallback) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç!');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç fallback
        console.log('\nüîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ü–£–¢–¨ FALLBACK...');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const semanticMemory = require('./server/semantic-memory/index.cjs');
        
        if (semanticMemory.naturalLanguageGenerator) {
          console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º natural-language-generator...');
          
          const semanticData = {
            semantic_cluster: { name: 'knowledge_request', confidence: 90 },
            query_type: 'information_request',
            dialog_category: 'knowledge_sharing'
          };
          
          const directResponse = await semanticMemory.naturalLanguageGenerator.generateResponse(
            testQuery,
            semanticData,
            { autonomousMode: true }
          );
          
          console.log('‚úÖ –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç NLG:', directResponse?.substring(0, 150) || '–ü–£–°–¢–û–ô');
          console.log('üéØ NLG fallback?:', directResponse?.includes('–ë–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑') ? 'üö® –î–ê!' : '‚úÖ –ù–ï–¢');
        }
      } else {
        console.log('üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã!');
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º semantic-integration-layer
    console.log('\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú SEMANTIC-INTEGRATION-LAYER...');
    const semanticIntegration = require('./server/semantic-integration-layer.cjs');
    
    if (semanticIntegration.analyzeWithSemantics) {
      const semanticResult = await semanticIntegration.analyzeWithSemantics(testQuery, {
        sessionId: 'test-session',
        userId: 1
      });
      
      console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ SEMANTIC-INTEGRATION:');
      console.log('‚úÖ –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', !!semanticResult);
      console.log('‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', semanticResult?.confidence || 0);
      console.log('‚úÖ –ú–µ—Ç–æ–¥:', semanticResult?.method || '–ù–ï –£–ö–ê–ó–ê–ù');
      
      if (semanticResult?.response) {
        console.log('‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', semanticResult.response.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('‚úÖ –ü–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤:', semanticResult.response.substring(0, 150));
        
        const isSemanticFallback = semanticResult.response.includes('–ë–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
        console.log('üéØ Semantic fallback?:', isSemanticFallback ? 'üö® –î–ê!' : '‚úÖ –ù–ï–¢');
      }
    }
    
    // 3. –ù–∞–π–¥–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç fallback
    console.log('\n3Ô∏è‚É£ –ò–©–ï–ú –ò–°–¢–û–ß–ù–ò–ö FALLBACK...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º routes.ts fallback
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º routes.ts fallback —Ñ—É–Ω–∫—Ü–∏–∏...');
    
    const fs = require('fs');
    const routesContent = fs.readFileSync('./server/routes.ts', 'utf8');
    
    if (routesContent.includes('generateFriendlyFallbackResponse')) {
      console.log('‚ö†Ô∏è –ù–ê–ô–î–ï–ù generateFriendlyFallbackResponse –≤ routes.ts');
    }
    
    if (routesContent.includes('–ë–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑')) {
      console.log('üö® –ù–ê–ô–î–ï–ù —Ç–µ–∫—Å—Ç "–ë–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑" –≤ routes.ts!');
    }
    
    if (routesContent.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ')) {
      console.log('üö® –ù–ê–ô–î–ï–ù —Ç–µ–∫—Å—Ç "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ" –≤ routes.ts!');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
testFallbackDetection().then(() => {
  console.log('\nüèÅ –î–ï–¢–ï–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
}).catch(error => {
  console.error('üí• –î–ï–¢–ï–ö–¢–û–† –£–ü–ê–õ:', error);
});