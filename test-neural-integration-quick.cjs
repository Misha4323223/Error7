/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

async function testNeuralIntegration() {
  console.log('üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
    const { NeuralIntegrationLayer } = require('./server/neural-integration.cjs');
    const neuralIntegration = new NeuralIntegrationLayer();
    
    console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    await neuralIntegration.initialize();
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞...');
    const response = await neuralIntegration.generateHybridResponse('—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–≤–∞');
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', response);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    if (response && response.length > 50) {
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testNeuralIntegration();