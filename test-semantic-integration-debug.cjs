/**
 * –û—Ç–ª–∞–¥–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ –≤ analyzeWithSemantics
 */

async function debugSemanticIntegration() {
  console.log('üîß –û–¢–õ–ê–î–ö–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('=' .repeat(50));
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º semantic-integration-layer
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º semantic-integration-layer...');
    const semanticIntegrationLayer = require('./server/semantic-integration-layer.cjs');
    
    if (!semanticIntegrationLayer) {
      console.log('‚ùå semantic-integration-layer –ù–ï –ó–ê–ì–†–£–ñ–ï–ù');
      return false;
    }
    
    console.log('‚úÖ semantic-integration-layer –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º analyzeWithSemantics –º–µ—Ç–æ–¥
    if (typeof semanticIntegrationLayer.analyzeWithSemantics !== 'function') {
      console.log('‚ùå –ú–µ—Ç–æ–¥ analyzeWithSemantics –ù–ï –ù–ê–ô–î–ï–ù');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(semanticIntegrationLayer));
      return false;
    }
    
    console.log('‚úÖ –ú–µ—Ç–æ–¥ analyzeWithSemantics –Ω–∞–π–¥–µ–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú analyzeWithSemantics...');
    const testInput = "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–≥–æ–Ω—å?";
    const userContext = {
      userId: 'test-user',
      sessionId: 'test-session',
      fullAnalysis: true,
      activateAllModules: true
    };
    
    console.log(`üìù –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å: "${testInput}"`);
    console.log('‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: 10 —Å–µ–∫—É–Ω–¥');
    
    const analysisPromise = semanticIntegrationLayer.analyzeWithSemantics(testInput, userContext);
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞ (10 —Å–µ–∫)')), 10000);
    });
    
    try {
      const result = await Promise.race([analysisPromise, timeoutPromise]);
      
      console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
      
      if (result) {
        console.log(`  ‚Ä¢ shouldUseSemantic: ${result.shouldUseSemantic || 'undefined'}`);
        console.log(`  ‚Ä¢ semanticResult: ${result.semanticResult ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
        
        if (result.semanticResult) {
          console.log(`    ‚Ä¢ intent: ${result.semanticResult.intent || 'undefined'}`);
          console.log(`    ‚Ä¢ confidence: ${result.semanticResult.confidence || 'undefined'}`);
          console.log(`    ‚Ä¢ category: ${result.semanticResult.category || 'undefined'}`);
        }
        
        console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${JSON.stringify(result).length} —Å–∏–º–≤–æ–ª–æ–≤`);
        return true;
      } else {
        console.log('‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢ NULL –ò–õ–ò UNDEFINED');
        return false;
      }
      
    } catch (analysisError) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –í analyzeWithSemantics:');
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', analysisError.message);
      console.error('   –°—Ç–µ–∫:', analysisError.stack?.split('\n').slice(0, 5).join('\n'));
      
      // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (analysisError.message.includes('Cannot read properties')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤—É null/undefined –æ–±—ä–µ–∫—Ç–∞');
      } else if (analysisError.message.includes('is not a function')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –í—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      } else if (analysisError.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è');
      } else {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–¢–õ–ê–î–ö–ò:', error.message);
    console.error('‚ùå –°—Ç–µ–∫:', error.stack?.split('\n').slice(0, 5).join('\n'));
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugSemanticIntegration()
  .then(success => {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–õ–ê–î–ö–ò:');
    console.log('=' .repeat(50));
    
    if (success) {
      console.log('‚úÖ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢');
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ analyzeWithSemantics');
      console.log('üí° –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ conversation-engine');
    } else {
      console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –í –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
      console.log('üîß analyzeWithSemantics —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      console.log('üí° –≠—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ fallback –æ—à–∏–±–æ–∫ –≤ live —Å–∏—Å—Ç–µ–º–µ');
    }
    
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –û–¢–õ–ê–î–ö–ò:', error);
    process.exit(1);
  });