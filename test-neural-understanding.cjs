/**
 * üß† –¢–ï–°–¢ –ü–û–ù–ò–ú–ê–ù–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–Ω–∏–º–∞–µ—Ç –ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —á—Ç–æ –µ–π –ø–∏—à—É—Ç
 */

async function testNeuralUnderstanding() {
  console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    const neuralCore = require('./server/neural-network-core.cjs');
    
    console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:', neuralCore.getModelSummary ? neuralCore.getModelSummary() : '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
    
    // –¢–µ—Å—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const testInputs = [
      "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–≤–∞",
      "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞",
      "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞",
      "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å"
    ];
    
    for (const input of testInputs) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${input}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
      const semanticMemory = require('./server/semantic-memory/index.cjs');
      const analysis = await semanticMemory.analyzeCompleteRequest(input, {});
      
      console.log(`üìä –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ: ${analysis.confidence || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${analysis.category || '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`);
      console.log(`üìù –û—Ç–≤–µ—Ç: ${analysis.generatedResponse ? analysis.generatedResponse.substring(0, 100) + '...' : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É neural integration
    try {
      const neuralIntegration = require('./server/neural-integration.cjs');
      console.log('\nüîó Neural Integration –¥–æ—Å—Ç—É–ø–µ–Ω');
      
      const neuralResponse = await neuralIntegration.generateHybridResponse("—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–≤–∞", {});
      console.log('üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç:', neuralResponse ? neuralResponse.substring(0, 100) + '...' : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
      
    } catch (error) {
      console.log('‚ùå Neural Integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error.message);
  }
}

testNeuralUnderstanding();