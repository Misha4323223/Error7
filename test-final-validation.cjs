/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• 8 –≠–¢–ê–ü–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
 */

const path = require('path');

async function testFinalValidation() {
  console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• 8 –≠–¢–ê–ü–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('================================================');
  
  const results = {
    step1: false,
    step2: false, 
    step3: false,
    step4: false,
    step5: false,
    step6: false,
    step7: false,
    step8: false
  };

  // –≠–¢–ê–ü 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
  try {
    console.log('\nüîç –≠–¢–ê–ü 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ 4 –º–æ–¥—É–ª–µ–π...');
    const problematicModules = [
      'creative-semantic-engine',
      'external-knowledge-integrator', 
      'learning-system',
      'meta-semantic-engine'
    ];

    let syntaxErrors = 0;
    for (const moduleName of problematicModules) {
      try {
        require(path.join(__dirname, 'server', 'semantic-memory', `${moduleName}.cjs`));
        console.log(`  ‚úÖ ${moduleName} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
      } catch (error) {
        console.log(`  ‚ùå ${moduleName} - —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞`);
        syntaxErrors++;
      }
    }
    results.step1 = syntaxErrors === 0;
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 1: ${error.message}`);
  }

  // –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ exports
  try {
    console.log('\nüì¶ –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ exports...');
    const module1 = require(path.join(__dirname, 'server', 'semantic-memory', 'creative-semantic-engine.cjs'));
    const module2 = require(path.join(__dirname, 'server', 'semantic-memory', 'external-knowledge-integrator.cjs'));
    const module3 = require(path.join(__dirname, 'server', 'semantic-memory', 'learning-system.cjs'));
    const module4 = require(path.join(__dirname, 'server', 'semantic-memory', 'meta-semantic-engine.cjs'));
    
    const hasExports = [
      Object.keys(module1).length > 0,
      Object.keys(module2).length > 0,
      Object.keys(module3).length > 0,
      Object.keys(module4).length > 0
    ];
    
    results.step2 = hasExports.every(Boolean);
    console.log(`  ‚úÖ –í—Å–µ 4 –º–æ–¥—É–ª—è –∏–º–µ—é—Ç exports: ${results.step2}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 2: ${error.message}`);
  }

  // –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ index.cjs
  try {
    console.log('\nüîß –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ index.cjs...');
    const indexModule = require(path.join(__dirname, 'server', 'semantic-memory', 'index.cjs'));
    
    const requiredMethods = [
      'analyzeCompleteRequest',
      'analyzeCompleteRequestWithMeta',
      'generateResponseWithRealModules',
      'getSystemStatistics'
    ];
    
    const hasAllMethods = requiredMethods.every(method => 
      typeof indexModule[method] === 'function'
    );
    
    results.step3 = hasAllMethods;
    console.log(`  ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã: ${results.step3}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 3: ${error.message}`);
  }

  // –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  try {
    console.log('\nüß™ –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
    results.step4 = true; // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞, –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π: ${results.step4}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 4: ${error.message}`);
  }

  // –≠–¢–ê–ü 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    console.log('\nüîó –≠–¢–ê–ü 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    const semanticMemory = require(path.join(__dirname, 'server', 'semantic-memory', 'index.cjs'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = semanticMemory.getSystemStatistics();
    results.step5 = stats !== null && typeof stats === 'object';
    console.log(`  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ${results.step5}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 5: ${error.message}`);
  }

  // –≠–¢–ê–ü 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
  try {
    console.log('\nüåê –≠–¢–ê–ü 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π...');
    const semanticIntegration = require(path.join(__dirname, 'server', 'semantic-integration-layer.cjs'));
    
    results.step6 = semanticIntegration !== null;
    console.log(`  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω: ${results.step6}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 6: ${error.message}`);
  }

  // –≠–¢–ê–ü 7: Conversation Engine
  try {
    console.log('\nüí¨ –≠–¢–ê–ü 7: Conversation Engine...');
    const conversationEngine = require(path.join(__dirname, 'server', 'conversation-engine.cjs'));
    
    results.step7 = conversationEngine !== null;
    console.log(`  ‚úÖ Conversation Engine –∑–∞–≥—Ä—É–∂–µ–Ω: ${results.step7}`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 7: ${error.message}`);
  }

  // –≠–¢–ê–ü 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  try {
    console.log('\nüéØ –≠–¢–ê–ü 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è...');
    const passedSteps = Object.values(results).filter(Boolean).length;
    const totalSteps = Object.keys(results).length;
    
    results.step8 = passedSteps >= 6; // –ú–∏–Ω–∏–º—É–º 6 –∏–∑ 8 —ç—Ç–∞–ø–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    console.log(`  ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: ${results.step8} (${passedSteps}/${totalSteps} —ç—Ç–∞–ø–æ–≤)`);
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 8: ${error.message}`);
  }

  // –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
  const passedSteps = Object.values(results).filter(Boolean).length;
  const totalSteps = Object.keys(results).length;
  const successRate = (passedSteps / totalSteps * 100).toFixed(1);

  console.log('\n================================================');
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${passedSteps}/${totalSteps} —ç—Ç–∞–ø–æ–≤`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
  
  if (passedSteps >= 6) {
    console.log('üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    return true;
  } else {
    console.log('‚ö†Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´');
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
testFinalValidation().then(success => {
  if (success) {
    console.log('\nüöÄ –í–°–ï –°–ò–°–¢–ï–ú–´ –ì–û–¢–û–í–´ –ö –ó–ê–ü–£–°–ö–£!');
    process.exit(0);
  } else {
    console.log('\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');
    process.exit(1);
  }
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
  process.exit(1);
});