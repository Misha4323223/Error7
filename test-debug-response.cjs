/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î"
 */

const path = require('path');

async function debugResponseSource() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –û–¢–í–ï–¢–û–í');
  console.log('===============================\n');

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine-semantic-provider
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine-semantic-provider...');
    
    try {
      const semanticProvider = require('./server/conversation-engine-semantic-provider.cjs');
      
      const testQuery = "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å";
      console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${testQuery}"`);
      
      const result = await semanticProvider.processRequest(testQuery);
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ SEMANTIC PROVIDER:');
      console.log('Success:', result.success);
      console.log('Method:', result.method);
      console.log('Provider:', result.provider);
      console.log('Confidence:', result.confidence);
      console.log('Response length:', result.response?.length || 0);
      console.log('Response preview:', result.response?.substring(0, 200) + '...');
      
      if (result.response?.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å')) {
        console.log('‚ùå –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö: conversation-engine-semantic-provider');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ semantic provider:', error.message);
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º semantic-integration-layer –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º semantic-integration-layer...');
    
    try {
      const semanticIntegration = require('./server/semantic-integration-layer.cjs');
      
      if (semanticIntegration.generateIntelligentFallbackResponse) {
        const fallbackResponse = semanticIntegration.generateIntelligentFallbackResponse("–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å");
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ SEMANTIC INTEGRATION FALLBACK:');
        console.log('Response length:', fallbackResponse?.length || 0);
        console.log('Response preview:', fallbackResponse?.substring(0, 200) + '...');
        
        if (fallbackResponse?.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å')) {
          console.log('‚ùå –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö: semantic-integration-layer.generateIntelligentFallbackResponse');
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ semantic integration:', error.message);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine...');
    
    try {
      const conversationEngine = require('./server/conversation-engine.cjs');
      
      if (conversationEngine.generateResponse) {
        const engineResponse = await conversationEngine.generateResponse("–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å", {
          useSemantics: true,
          semanticMode: 'enhanced'
        });
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ CONVERSATION ENGINE:');
        console.log('Response type:', typeof engineResponse);
        console.log('Response length:', engineResponse?.response?.length || engineResponse?.length || 0);
        console.log('Response preview:', (engineResponse?.response || engineResponse || '').substring(0, 200) + '...');
        
        if ((engineResponse?.response || engineResponse || '').includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å')) {
          console.log('‚ùå –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö: conversation-engine');
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ conversation engine:', error.message);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º smart-router –Ω–∞–ø—Ä—è–º—É—é
    console.log('\n\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º smart-router...');
    
    try {
      const smartRouter = require('./server/smart-router.js');
      
      if (smartRouter.getAIResponseWithSearch) {
        const routerResponse = await smartRouter.getAIResponseWithSearch("–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å");
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ SMART ROUTER:');
        console.log('Response type:', typeof routerResponse);
        console.log('Response length:', routerResponse?.response?.length || routerResponse?.length || 0);
        console.log('Response preview:', (routerResponse?.response || routerResponse || '').substring(0, 200) + '...');
        
        if ((routerResponse?.response || routerResponse || '').includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å')) {
          console.log('‚ùå –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö: smart-router');
        }
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ smart router:', error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    console.log('\n\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint...');
    
    try {
      const axios = require('axios');
      
      const apiResponse = await axios.post('http://localhost:5000/api/ai/chat', {
        message: "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å"
      });
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ API:');
      console.log('Status:', apiResponse.status);
      console.log('Response length:', apiResponse.data?.response?.length || 0);
      console.log('Response preview:', (apiResponse.data?.response || '').substring(0, 200) + '...');
      
      if ((apiResponse.data?.response || '').includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å')) {
        console.log('‚ùå –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö: API endpoint');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', error.message);
    }

    console.log('\n\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    console.log('===================');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugResponseSource().catch(console.error);