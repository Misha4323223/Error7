/**
 * –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ü–ê–ú–Ø–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

console.log('üß™ –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ü–ê–ú–Ø–¢–ò');
console.log('–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ analyzeCompleteRequest —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');

async function testExportedFunctions() {
  try {
    console.log('\nüì¶ –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–£–õ–Ø...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    console.log('‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', Object.keys(semanticMemory).length);
    console.log('‚úÖ analyzeCompleteRequest:', typeof semanticMemory.analyzeCompleteRequest);
    console.log('‚úÖ semanticMemory –æ–±—ä–µ–∫—Ç:', 'semanticMemory' in semanticMemory);
    
    console.log('\nüß™ –¢–ï–°–¢ 1: –í—ã–∑–æ–≤ analyzeCompleteRequest');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥—É–ª–µ–π (3 —Å–µ–∫)...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const testQuery = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testQuery}"`);
    
    const result = await semanticMemory.analyzeCompleteRequest(testQuery, {});
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:');
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫');
    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω –æ–±—ä–µ–∫—Ç:', typeof result);
    console.log('‚úÖ –ï—Å—Ç—å –∞–Ω–∞–ª–∏–∑:', !!result.analysis);
    console.log('‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result.confidence);
    console.log('‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result.processingTime + '–º—Å');
    
    if (result.analysis) {
      console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:', !!result.analysis.semantic);
      console.log('‚úÖ –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑:', !!result.analysis.meta);
      console.log('‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:', !!result.analysis.emotional);
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
    console.log('‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
    
  } catch (error) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.log('üìÑ –°—Ç–µ–∫:', error.stack?.substring(0, 500));
  }
}

testExportedFunctions();