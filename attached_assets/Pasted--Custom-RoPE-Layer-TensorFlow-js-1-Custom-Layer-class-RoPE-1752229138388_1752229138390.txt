Поэтапная реализация Custom RoPE Layer для TensorFlow.js
ЭТАП 1: Структура Custom Layer
class RoPELayer extends tf.layers.Layer {
  constructor(config) {
    super(config);
    this.embeddingDim = config.embeddingDim;
    this.maxSeqLength = config.maxSeqLength;
    this.name = config.name || 'rope_layer';
  }
}
ЭТАП 2: Метод build() - инициализация весов
build(inputShape) {
  // Создаем frequency weights для RoPE
  this.freqWeights = this.addWeight(
    'rope_frequencies',
    [this.maxSeqLength, Math.floor(this.embeddingDim / 2)],
    'float32',
    tf.initializers.glorotUniform()
  );
  
  super.build(inputShape);
}
ЭТАП 3: Метод computeOutputShape()
computeOutputShape(inputShape) {
  // RoPE не меняет размерность - возвращаем входную форму
  return inputShape;
}
ЭТАП 4: Основная логика в call()
call(inputs, kwargs) {
  return tf.tidy(() => {
    const [embeddings, positions] = inputs;
    
    // Вычисляем частоты
    const frequencies = tf.matMul(positions, this.freqWeights.read());
    
    // Создаем cos/sin компоненты
    const cosFreq = tf.cos(frequencies);
    const sinFreq = tf.sin(frequencies);
    
    // Расширяем до полной размерности
    const cosExpanded = tf.concat([cosFreq, cosFreq], -1);
    const sinExpanded = tf.concat([sinFreq, sinFreq], -1);
    
    // Применяем rotation
    const rotated = tf.add(
      tf.mul(embeddings, cosExpanded),
      tf.mul(this.rotateHalf(embeddings), sinExpanded)
    );
    
    return rotated;
  });
}
ЭТАП 5: Вспомогательный метод rotateHalf()
rotateHalf(x) {
  // Реализует rotation на половину embedding dimension
  const halfDim = Math.floor(this.embeddingDim / 2);
  const x1 = x.slice([0, 0, 0], [-1, -1, halfDim]);
  const x2 = x.slice([0, 0, halfDim], [-1, -1, halfDim]);
  
  return tf.concat([tf.neg(x2), x1], -1);
}
ЭТАП 6: Сериализация (обязательно для save/load)
getConfig() {
  const config = {
    embeddingDim: this.embeddingDim,
    maxSeqLength: this.maxSeqLength,
    name: this.name
  };
  const baseConfig = super.getConfig();
  return {...baseConfig, ...config};
}
static get className() {
  return 'RoPELayer';
}