/**
 * üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–ï–ô–†–û–°–ï–¢–ò –° –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–û–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò
 */

const conversationEngine = require('./server/conversation-engine.cjs');
const semanticRouter = require('./server/semantic-router.cjs');
const express = require('express');
const { initializeNeuralIntegration } = require('./server/neural-integration.cjs');

async function testFullIntegration() {
  console.log('üöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–ï–ô–†–û–°–ï–¢–ò –° –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–û–ô');
  console.log('=' .repeat(70));

  try {
    // 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò
    console.log('\nüìã –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    
    let neuralIntegration = null;
    try {
      neuralIntegration = await initializeNeuralIntegration();
      console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      if (neuralIntegration.isInitialized) {
        console.log('  ‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
        console.log('  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log('  ‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.log('  ‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }
    } catch (error) {
      console.log('  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error.message);
    }

    // 2. –¢–ï–°–¢ SEMANTIC ROUTER
    console.log('\nüìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç Semantic Router...');
    
    const testQuery = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏";
    
    try {
      const routingResult = await semanticRouter.analyzeAndRoute(testQuery);
      
      console.log('‚úÖ Semantic Router —Ä–∞–±–æ—Ç–∞–µ—Ç:');
      console.log(`  - –†–µ–∂–∏–º: ${routingResult.mode}`);
      console.log(`  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${routingResult.complexity}`);
      console.log(`  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${routingResult.category}`);
      console.log(`  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å: ${routingResult.useNeural}`);
      console.log(`  - –¢–∞–π–º–∞—É—Ç: ${routingResult.timeout}–º—Å`);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ Semantic Router:', error.message);
    }

    // 3. –¢–ï–°–¢ CONVERSATION ENGINE
    console.log('\nüìã –≠–¢–ê–ü 3: –¢–µ—Å—Ç Conversation Engine...');
    
    const testMessages = [
      "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
      "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–∫–∞—Ç–∞",
      "–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      "–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º –¥–ª—è –≤—ã—à–∏–≤–∫–∏",
      "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
    ];
    
    for (const message of testMessages) {
      try {
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${message}"`);
        
        const context = {
          sessionId: 'test-session',
          userId: 'test-user',
          preferences: { useNeural: true }
        };
        
        const response = await conversationEngine.processUserInput(message, context);
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
        console.log(`  - –î–ª–∏–Ω–∞: ${response.reply.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${response.confidence}`);
        console.log(`  - –ö–∞—á–µ—Å—Ç–≤–æ: ${response.quality}`);
        console.log(`  - –ú–æ–¥—É–ª–∏: ${response.metadata.modulesUsed.join(', ')}`);
        console.log(`  - –í—Ä–µ–º—è: ${response.metadata.processingTime}–º—Å`);
        console.log(`  - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞: ${response.metadata.semanticDepth}`);
        
        if (response.metadata.neuralContribution) {
          console.log('  üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
        }
        
        if (response.metadata.generationType) {
          console.log(`  - –¢–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${response.metadata.generationType}`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
        const preview = response.reply.substring(0, 100);
        console.log(`  - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: "${preview}${response.reply.length > 100 ? '...' : ''}"`);
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${message}":`, error.message);
      }
    }

    // 4. –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê –ù–ï–ô–†–û–°–ï–¢–ò
    console.log('\nüìã –≠–¢–ê–ü 4: –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
    
    if (neuralIntegration && neuralIntegration.isInitialized) {
      try {
        const neuralResponse = await neuralIntegration.generateHybridResponse(
          "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
          { temperature: 0.7, maxTokens: 150 }
        );
        
        console.log('‚úÖ –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É—Å–ø–µ—à–µ–Ω:');
        console.log(`  - –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${neuralResponse.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`  - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: "${neuralResponse.substring(0, 120)}..."`);
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    // 5. –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´
    console.log('\nüìã –≠–¢–ê–ü 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    if (neuralIntegration && neuralIntegration.isInitialized) {
      try {
        const stats = neuralIntegration.getSystemStats();
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
        console.log(`  - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${stats.isInitialized}`);
        console.log(`  - –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º: ${stats.hybridMode}`);
        console.log(`  - –ù–µ–π—Ä–æ—è–¥—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${stats.neuralCoreAvailable}`);
        console.log(`  - –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${stats.modelLoaded}`);
        console.log(`  - –°–µ–º–∞–Ω—Ç–∏–∫–∞: ${stats.semantic}`);
        console.log(`  - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${stats.capabilities.join(', ')}`);
        
        if (stats.neural) {
          console.log(`  - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.neural.architecture}`);
          console.log(`  - –°–ª–æ–∏: ${stats.neural.numLayers}`);
          console.log(`  - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${stats.neural.totalParams.toLocaleString()}`);
          console.log(`  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${stats.neural.modelComplexity}`);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      }
    }

    // 6. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
    console.log('\nüìã –≠–¢–ê–ü 6: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ...');
    
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('=' .repeat(50));
    
    if (neuralIntegration && neuralIntegration.isInitialized) {
      console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞');
      console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      console.log('‚úÖ Conversation Engine –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      console.log('\nüöÄ BOOOMERANGS AI –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ê!');
      console.log('   - –ù–µ–π—Ä–æ—Å–µ—Ç—å: 115+ –º–ª–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
      console.log('   - –°–µ–º–∞–Ω—Ç–∏–∫–∞: 48+ –º–æ–¥—É–ª–µ–π');
      console.log('   - –†–µ–∂–∏–º: –≥–∏–±—Ä–∏–¥–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
      console.log('   - –°—Ç–∞—Ç—É—Å: –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
      
      return true;
    } else {
      console.log('‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ');
      return false;
    }
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
    console.error('üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testFullIntegration()
    .then(success => {
      if (success) {
        console.log('\nüéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('üî• –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        process.exit(0);
      } else {
        console.log('\n‚ö†Ô∏è –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô:', error);
      process.exit(1);
    });
}

module.exports = { testFullIntegration };