/**
 * –≠–¢–ê–ü 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
 */

const path = require('path');

async function testIntegration() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
    const semanticMemory = require(path.join(__dirname, 'server', 'semantic-memory', 'index.cjs'));
    
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    const stats = semanticMemory.getSystemStatistics();
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞:`);
    console.log(`   –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: ${stats.totalModules}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: ${stats.activeModules}`);
    console.log(`   –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${(stats.systemHealth * 100).toFixed(1)}%`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º moduleChecker
    if (semanticMemory.moduleChecker) {
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ModuleChecker...');
      const criticalStatus = semanticMemory.moduleChecker.checkCriticalModules();
      console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏: ${criticalStatus.allCriticalAvailable ? '–í–°–ï –î–û–°–¢–£–ü–ù–´' : '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
      const keyModules = ['natural-language-generator', 'semantic-analyzer', 'meta-semantic-engine', 'emotional-semantic-matrix'];
      for (const module of keyModules) {
        const status = semanticMemory.moduleChecker.getModuleStatus(module);
        console.log(`   ${module}: ${status.available ? '‚úÖ –î–û–°–¢–£–ü–ï–ù' : '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'} (${status.reason})`);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º analyzeCompleteRequest
    console.log('\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ analyzeCompleteRequest...');
    const testMessage = "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?";
    const analysis = await semanticMemory.analyzeCompleteRequest(testMessage);
    
    if (analysis && !analysis.error) {
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      console.log(`   –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage}"`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
      console.log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${analysis.processingTime}–º—Å`);
      
      if (analysis.moduleStatus) {
        const realModules = Object.values(analysis.moduleStatus).filter(s => s === 'REAL_MODULE_ACTIVE').length;
        const totalModules = Object.keys(analysis.moduleStatus).length;
        console.log(`   –†–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: ${realModules}/${totalModules}`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${analysis.error}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑
    console.log('\nüîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞...');
    const metaAnalysis = await semanticMemory.analyzeCompleteRequestWithMeta(testMessage);
    
    if (metaAnalysis && !metaAnalysis.error) {
      console.log(`‚úÖ –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      console.log(`   –ú–µ—Ç–∞-—Ä–µ–∂–∏–º: ${metaAnalysis.isMeta ? '–ê–ö–¢–ò–í–ï–ù' : '–ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(metaAnalysis.confidence * 100).toFixed(1)}%`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞: ${metaAnalysis.error}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞...');
    const response = await semanticMemory.generateResponseWithRealModules(testMessage, analysis);
    
    if (response && response.success) {
      console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      console.log(`   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: ${response.generatedBy}`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(response.confidence * 100).toFixed(1)}%`);
      console.log(`   –û—Ç–≤–µ—Ç: "${response.response.substring(0, 100)}..."`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${response.error}`);
    }
    
    console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    return true;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testIntegration().then(success => {
  if (success) {
    console.log('\n‚úÖ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô');
  }
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});