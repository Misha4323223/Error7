/**
 * üá∑üá∫ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò –†–£–°–°–ö–û–ì–û –Ø–ó–´–ö–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ
 */

async function testRussianLanguage() {
  console.log('üá∑üá∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö...\n');
  
  const testInput = "—á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–∞–≤–∞";
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...');
  try {
    const SemanticAnalyzer = require('./server/semantic-memory/semantic-analyzer.cjs');
    const analyzer = new SemanticAnalyzer();
    
    const analysis = analyzer.analyzeSemanticMeaning(testInput);
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:', {
      intent: analysis.intent,
      confidence: analysis.confidence,
      cluster: analysis.semantic_cluster?.name
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º natural language generator
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º natural language generator...');
  try {
    const NaturalLanguageGenerator = require('./server/semantic-memory/natural-language-generator.cjs');
    const nlg = new NaturalLanguageGenerator();
    
    const response = nlg.generateNaturalKnowledgeResponse(testInput, {});
    console.log('‚úÖ NLG –æ—Ç–≤–µ—Ç:', response ? `${typeof response === 'string' ? response.length : JSON.stringify(response).length} —Å–∏–º–≤–æ–ª–æ–≤` : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞');
    if (response) {
      const responseText = typeof response === 'string' ? response : response.response || JSON.stringify(response);
      console.log('–ü—Ä–∏–º–µ—Ä:', responseText.substring(0, 100) + '...');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ NLG:', error.message);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º conversation engine
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation engine...');
  try {
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    const result = await conversationEngine.processUserInput(testInput, {
      userId: 'test_user',
      sessionId: 'test_session'
    });
    
    console.log('‚úÖ Conversation engine:', {
      hasReply: !!result.reply,
      confidence: result.confidence,
      approach: result.metadata?.approach
    });
    
    if (result.reply) {
      console.log('–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:', result.reply.substring(0, 100) + '...');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ conversation engine:', error.message);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å...');
  try {
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    const memoryResult = await semanticMemory.analyzeCompleteRequest(testInput, {});
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å:', {
      confidence: memoryResult.confidence,
      category: memoryResult.category,
      hasResponse: !!memoryResult.generatedResponse
    });
    
    if (memoryResult.generatedResponse) {
      const responseText = typeof memoryResult.generatedResponse === 'string' ? 
        memoryResult.generatedResponse : 
        memoryResult.generatedResponse.response || JSON.stringify(memoryResult.generatedResponse);
      console.log('–ü—Ä–∏–º–µ—Ä:', responseText.substring(0, 100) + '...');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏:', error.message);
  }
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º neural integration
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º neural integration...');
  try {
    const neuralIntegration = require('./server/neural-integration.cjs');
    
    const neuralResult = await neuralIntegration.generateHybridResponse(testInput, {});
    console.log('‚úÖ Neural integration:', {
      hasResponse: !!neuralResult,
      type: typeof neuralResult
    });
    
    if (neuralResult) {
      console.log('–ü—Ä–∏–º–µ—Ä:', neuralResult.substring(0, 100) + '...');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ neural integration:', error.message);
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º routes API
  console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API routes...');
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    const axios = require('axios');
    
    setTimeout(async () => {
      try {
        const response = await axios.post('http://localhost:5000/api/ai/chat', {
          message: testInput
        }, {
          timeout: 10000,
          headers: { 'Content-Type': 'application/json' }
        });
        
        console.log('‚úÖ API routes:', {
          status: response.status,
          hasData: !!response.data,
          responseLength: response.data?.length || 0
        });
        
        if (response.data) {
          console.log('API –æ—Ç–≤–µ—Ç:', response.data.substring(0, 100) + '...');
        }
      } catch (apiError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ API:', apiError.message);
      }
    }, 2000);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ API —Ç–µ—Å—Ç–∞:', error.message);
  }
  
  // –í—ã–≤–æ–¥—ã
  console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –†–£–°–°–ö–ò–ú –Ø–ó–´–ö–û–ú:');
  console.log('–ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ —Ä—É—Å—Å–∫–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–∏...');
}

testRussianLanguage();