/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê AI –°–ò–°–¢–ï–ú–´
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */

console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê AI –°–ò–°–¢–ï–ú–´ BOOOMERANGS');

async function testComprehensiveAI() {
  try {
    console.log('\nüìã –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ natural-language-generator...');
    
    const nlgModule = require('./server/semantic-memory/natural-language-generator.cjs');
    console.log('‚úÖ NLG –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(nlgModule));
    
    if (nlgModule.generateResponse) {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
      const testResponse = nlgModule.generateResponse('—á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑', {}, {});
      console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', testResponse);
      
      if (testResponse && testResponse.response && testResponse.response.length > 100) {
        console.log('‚úÖ NLG —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('‚ùå NLG –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }
    } else {
      console.log('‚ùå –ú–µ—Ç–æ–¥ generateResponse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    console.log('\nüìã –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ semantic-integration-layer...');
    
    const integrationLayer = require('./server/semantic-integration-layer.cjs');
    console.log('‚úÖ Integration layer –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    if (integrationLayer.generateIntelligentFallbackResponse) {
      const fallbackResponse = integrationLayer.generateIntelligentFallbackResponse('—á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑');
      console.log('üìù Fallback –æ—Ç–≤–µ—Ç:', fallbackResponse.substring(0, 150) + '...');
      
      if (fallbackResponse.includes('–∞–Ω—Ç–∏—Ñ—Ä–∏–∑') || fallbackResponse.length > 300) {
        console.log('‚úÖ Integration layer –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
      } else {
        console.log('‚ùå Integration layer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–µ fallback');
      }
    }
    
    console.log('\nüìã –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ conversation-engine-semantic-provider...');
    
    const provider = require('./server/conversation-engine-semantic-provider.cjs');
    console.log('‚úÖ Provider –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    const testResult = await provider.processRequest('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑', {
      userId: 'test',
      sessionId: 'test'
    });
    
    console.log('üìù Provider —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('- Response length:', testResult.response?.length || 0);
    console.log('- Method:', testResult.method);
    console.log('- Confidence:', testResult.confidence);
    console.log('- Response preview:', testResult.response?.substring(0, 150) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    if (testResult.response && testResult.response.includes('–∞–Ω—Ç–∏—Ñ—Ä–∏–∑')) {
      console.log('‚úÖ Provider –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
    } else if (testResult.response && testResult.response.length > 200) {
      console.log('‚ö†Ô∏è Provider –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ –Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ');
    } else {
      console.log('‚ùå Provider –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ fallback –æ—Ç–≤–µ—Ç—ã');
    }
    
    console.log('\nüìã –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ semantic-memory –º–æ–¥—É–ª–µ–π...');
    
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    if (semanticMemory.modules) {
      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:', semanticMemory.modules.size);
      
      const nlgFromMemory = semanticMemory.modules.get('natural-language-generator');
      if (nlgFromMemory) {
        console.log('‚úÖ NLG –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ semantic-memory');
        console.log('üîç NLG –º–µ—Ç–æ–¥—ã:', Object.keys(nlgFromMemory));
      } else {
        console.log('‚ùå NLG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ semantic-memory');
      }
    }
    
    console.log('\nüìã –≠–¢–ê–ü 5: –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    const testQueries = [
      '—á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑',
      '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å',
      '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—å',
      '—Å–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞'
    ];
    
    for (const query of testQueries) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${query}"`);
      
      const result = await provider.processRequest(query, {
        userId: 'test',
        sessionId: 'test'
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
      const response = result.response || '';
      const isGoodResponse = response.length > 100 && 
                            !response.includes('–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –ú–æ—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è') &&
                            !response.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!') &&
                            (response.includes(query.split(' ')[2]) || response.includes(query.split(' ')[1]));
      
      console.log(`${isGoodResponse ? '‚úÖ' : '‚ùå'} ${query}: ${isGoodResponse ? '–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –û–¢–í–ï–¢' : 'FALLBACK –û–¢–í–ï–¢'}`);
      console.log(`   Length: ${response.length}, Method: ${result.method}`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
testComprehensiveAI();