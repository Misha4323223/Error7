/**
 * üéØ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ SEMANTIC ROUTER
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

const { analyzeAndRoute } = require('./server/semantic-router.cjs');

async function testSimpleSemanticRouter() {
  console.log('üéØ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ SEMANTIC ROUTER');
  console.log('===============================');
  
  const testQueries = [
    '–ø—Ä–∏–≤–µ—Ç',
    '–∫–∞–∫ –¥–µ–ª–∞',
    '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
    '—Å–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –≤—ã—à–∏–≤–∫–∏ —Å —Ä–æ–∑–∞–º–∏'
  ];
  
  for (const query of testQueries) {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${query}"`);
    
    try {
      const result = await analyzeAndRoute(query);
      
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:`, {
        complexity: result.complexity.toFixed(2),
        strategy: result.routingStrategy,
        mode: result.routingHints?.mode,
        useNeural: result.routingHints?.useNeural,
        timeLimit: result.routingHints?.timeLimit
      });
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
    }
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSimpleSemanticRouter().catch(console.error);