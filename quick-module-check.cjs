/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
 */

const fs = require('fs');

const KEY_MODULES = [
  'server/conversation-engine.cjs',
  'server/conversation-engine-semantic-provider.cjs', 
  'server/semantic-integration-layer.cjs',
  'server/smart-router.js',
  'server/intelligent-chat-processor.cjs',
  'server/semantic-memory/index.cjs',
  'server/semantic-memory/user-profiler.cjs'
];

async function quickCheck() {
  console.log('üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ú–û–î–£–õ–ï–ô');
  
  let success = 0;
  let failed = 0;
  
  for (const modulePath of KEY_MODULES) {
    console.log(`\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${modulePath}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
      if (!fs.existsSync(modulePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
      const content = fs.readFileSync(modulePath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
      const openBraces = (content.match(/\{/g) || []).length;
      const closeBraces = (content.match(/\}/g) || []).length;
      const openParens = (content.match(/\(/g) || []).length;
      const closeParens = (content.match(/\)/g) || []).length;
      
      if (openBraces !== closeBraces) {
        console.log(`‚ùå –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏: ${openBraces} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, ${closeBraces} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö`);
        failed++;
        continue;
      }
      
      if (openParens !== closeParens) {
        console.log(`‚ùå –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏: ${openParens} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, ${closeParens} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö`);
        failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π (–±—ã—Å—Ç—Ä–∞—è)
      const declarations = content.match(/(?:const|let|var)\s+(\w+)/g) || [];
      const varNames = declarations.map(d => d.split(/\s+/)[1]);
      const duplicates = varNames.filter((name, index) => varNames.indexOf(name) !== index);
      
      if (duplicates.length > 0) {
        console.log(`‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: ${[...new Set(duplicates)].join(', ')}`);
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è .cjs)
      if (modulePath.endsWith('.cjs')) {
        try {
          const absolutePath = require.resolve(`./${modulePath}`);
          delete require.cache[absolutePath];
          require(`./${modulePath}`);
          console.log(`‚úÖ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        } catch (loadError) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${loadError.message.split('\n')[0]}`);
          failed++;
          continue;
        }
      } else {
        console.log(`‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (TypeScript/JS —Ñ–∞–π–ª)`);
      }
      
      success++;
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
      failed++;
    }
  }
  
  console.log(`\nüìä –ò–¢–û–ì–ò –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}/${KEY_MODULES.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}/${KEY_MODULES.length}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${Math.round((success / KEY_MODULES.length) * 100)}%`);
  
  return { success, failed, total: KEY_MODULES.length };
}

if (require.main === module) {
  quickCheck().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { quickCheck };