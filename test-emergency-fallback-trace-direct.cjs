/**
 * –ü–†–Ø–ú–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê FALLBACK –û–¢–í–ï–¢–ê
 * –û–±—Ö–æ–¥–∏–º smart-router –∏ –Ω–∞–ø—Ä—è–º—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine-semantic-provider
 */

console.log('üö® –ü–†–Ø–ú–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê FALLBACK –û–¢–í–ï–¢–ê');

async function traceDirectProvider() {
  try {
    console.log('üìÅ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å conversation-engine-semantic-provider...');
    
    // –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ dynamic import
    const providerModule = await import('./server/conversation-engine-semantic-provider.cjs');
    
    console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(providerModule));
    
    if (providerModule.canHandle && providerModule.processRequest) {
      console.log('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ "—Å—É—á–∫–∞"...');
      
      const canHandle = providerModule.canHandle('—Å—É—á–∫–∞', {});
      console.log('‚ùì canHandle —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', canHandle);
      
      if (canHandle) {
        const result = await providerModule.processRequest('—Å—É—á–∫–∞', {
          userId: 'test',
          sessionId: 'test'
        });
        
        console.log('üìù –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò:');
        console.log('Response:', result.response);
        console.log('Provider:', result.provider);
        console.log('Method:', result.method);
        console.log('Confidence:', result.confidence);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—Ä–∞–∑—É
        if (result.response && result.response.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ')) {
          console.log('üö® –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö –í CONVERSATION-ENGINE-SEMANTIC-PROVIDER!');
          
          if (result.response.includes('–ø–æ–±–æ–ª—Ç–∞—Ç—å')) {
            console.log('üíÄ –ü–û–õ–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –° –ü–†–û–ë–õ–ï–ú–ù–´–ú –û–¢–í–ï–¢–û–ú!');
          }
        } else {
          console.log('‚úÖ –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—Ä–∞–∑—É');
        }
      } else {
        console.log('‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å');
      }
    } else {
      console.log('‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', error.message);
    
    // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ require
    try {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ require...');
      const provider = require('./server/conversation-engine-semantic-provider.cjs');
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ require');
      console.log('üîç –ú–µ—Ç–æ–¥—ã:', Object.keys(provider));
    } catch (requireError) {
      console.error('‚ùå Require —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', requireError.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
traceDirectProvider();