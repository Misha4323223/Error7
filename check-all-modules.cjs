/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π –Ω–∞ –æ—à–∏–±–∫–∏
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */

const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const MODULES_TO_CHECK = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–æ–¥—É–ª–∏
  'server/conversation-engine.cjs',
  'server/conversation-engine-semantic-provider.cjs', 
  'server/semantic-integration-layer.cjs',
  'server/smart-router.js',
  'server/intelligent-chat-processor.cjs',
  'server/routes.ts',
  
  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
  'server/semantic-memory/index.cjs',
  'server/semantic-memory/natural-language-generator.cjs',
  'server/semantic-memory/meta-semantic-engine.cjs',
  'server/semantic-memory/emotional-semantic-matrix.cjs',
  'server/semantic-memory/user-profiler.cjs',
  'server/semantic-memory/semantic-analyzer.cjs',
  'server/semantic-memory/learning-system.cjs',
  'server/semantic-memory/user-memory-manager.cjs',
  'server/semantic-memory/visual-semantic-extensions.cjs',
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
  'server/semantic-healthcheck.cjs',
  'server/semantic-monitor-dashboard.cjs'
];

async function checkAllModules() {
  console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–£–Æ –ü–†–û–í–ï–†–ö–£ –í–°–ï–• –ú–û–î–£–õ–ï–ô');
  console.log(`üìã –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${MODULES_TO_CHECK.length}`);
  
  const results = {
    total: MODULES_TO_CHECK.length,
    passed: 0,
    failed: 0,
    errors: [],
    warnings: []
  };
  
  for (const modulePath of MODULES_TO_CHECK) {
    console.log(`\nüß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å: ${modulePath}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(modulePath)) {
        const error = `‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${modulePath}`;
        console.log(error);
        results.errors.push(error);
        results.failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      let content;
      try {
        content = fs.readFileSync(modulePath, 'utf8');
      } catch (readError) {
        const error = `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${modulePath}: ${readError.message}`;
        console.log(error);
        results.errors.push(error);
        results.failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      const syntaxErrors = checkSyntaxErrors(content, modulePath);
      if (syntaxErrors.length > 0) {
        syntaxErrors.forEach(error => {
          console.log(`‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${modulePath}: ${error}`);
          results.errors.push(`${modulePath}: ${error}`);
        });
        results.failed++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      const structuralIssues = checkStructuralIssues(content, modulePath);
      if (structuralIssues.length > 0) {
        structuralIssues.forEach(issue => {
          console.log(`‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ ${modulePath}: ${issue}`);
          results.warnings.push(`${modulePath}: ${issue}`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è .cjs)
      if (modulePath.endsWith('.cjs')) {
        try {
          // –û—á–∏—Å—Ç–∏–º –∫—ç—à require
          const absolutePath = path.resolve(modulePath);
          if (require.cache[absolutePath]) {
            delete require.cache[absolutePath];
          }
          
          const module = require(`./${modulePath}`);
          console.log(`‚úÖ –ú–æ–¥—É–ª—å ${modulePath} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
          if (typeof module === 'object' && Object.keys(module).length === 0) {
            const warning = `–ú–æ–¥—É–ª—å ${modulePath} –∏–º–µ–µ—Ç –ø—É—Å—Ç—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã`;
            console.log(`‚ö†Ô∏è ${warning}`);
            results.warnings.push(warning);
          }
          
        } catch (loadError) {
          const error = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${modulePath}: ${loadError.message}`;
          console.log(error);
          results.errors.push(error);
          results.failed++;
          continue;
        }
      }
      
      console.log(`‚úÖ –ú–æ–¥—É–ª—å ${modulePath} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É`);
      results.passed++;
      
    } catch (generalError) {
      const error = `‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${modulePath}: ${generalError.message}`;
      console.log(error);
      results.errors.push(error);
      results.failed++;
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò –ú–û–î–£–õ–ï–ô:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.passed}/${results.total}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.failed}/${results.total}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${results.warnings.length}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${Math.round((results.passed / results.total) * 100)}%`);
  
  if (results.errors.length > 0) {
    console.log('\n‚ùå –°–ü–ò–°–û–ö –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö:');
    results.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  }
  
  if (results.warnings.length > 0) {
    console.log('\n‚ö†Ô∏è –°–ü–ò–°–û–ö –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô:');
    results.warnings.forEach((warning, index) => {
      console.log(`${index + 1}. ${warning}`);
    });
  }
  
  return results;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ
 */
function checkSyntaxErrors(content, filePath) {
  const errors = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
  const brackets = { '{': 0, '(': 0, '[': 0 };
  const quotes = { "'": 0, '"': 0, '`': 0 };
  
  for (let i = 0; i < content.length; i++) {
    const char = content[i];
    
    if (char === '{') brackets['{']++;
    else if (char === '}') brackets['{']--;
    else if (char === '(') brackets['(']++;
    else if (char === ')') brackets['(']--;
    else if (char === '[') brackets['[']++;
    else if (char === ']') brackets['[']--;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
  if (brackets['{'] !== 0) errors.push('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ {}');
  if (brackets['('] !== 0) errors.push('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ ()');
  if (brackets['['] !== 0) errors.push('–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ []');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π
  const declarations = content.match(/(?:const|let|var|function|class)\s+(\w+)/g);
  if (declarations) {
    const names = declarations.map(d => d.split(/\s+/)[1]);
    const duplicates = names.filter((name, index) => names.indexOf(name) !== index);
    if (duplicates.length > 0) {
      errors.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: ${[...new Set(duplicates)].join(', ')}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö template literals
  if (content.includes('${') && !content.includes('`')) {
    errors.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã template literal –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ backticks');
  }
  
  return errors;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */
function checkStructuralIssues(content, filePath) {
  const issues = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  if (filePath.endsWith('.cjs')) {
    if (!content.includes('module.exports') && !content.includes('exports.')) {
      issues.push('CommonJS –º–æ–¥—É–ª—å –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ .cjs —Ñ–∞–π–ª–∞—Ö
  if (filePath.endsWith('.cjs') && content.includes('import ')) {
    issues.push('ES6 –∏–º–ø–æ—Ä—Ç—ã –≤ CommonJS –º–æ–¥—É–ª–µ');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫–∞–≤—ã—á–µ–∫
  const singleQuotes = (content.match(/'/g) || []).length;
  const doubleQuotes = (content.match(/"/g) || []).length;
  const backticks = (content.match(/`/g) || []).length;
  
  if (singleQuotes > 0 && doubleQuotes > 0 && Math.abs(singleQuotes - doubleQuotes) > 20) {
    issues.push('–°–º–µ—à–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫–∞–≤—ã—á–µ–∫ (–æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∏ –¥–≤–æ–π–Ω—ã–µ)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  const consoleCount = (content.match(/console\.(log|info|warn|error)/g) || []).length;
  if (consoleCount > 50) {
    issues.push(`–ú–Ω–æ–≥–æ console –≤—ã–∑–æ–≤–æ–≤ (${consoleCount}), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å logger`);
  }
  
  return issues;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkAllModules().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª–µ–π:', error);
    process.exit(1);
  });
}

module.exports = { checkAllModules };