/**
 * –¢–ï–°–¢ –£–°–¢–†–ê–ù–ï–ù–ò–Ø FALLBACK –û–¢–í–ï–¢–û–í - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

console.log('üîç –¢–ï–°–¢ –£–°–¢–†–ê–ù–ï–ù–ò–Ø FALLBACK –û–¢–í–ï–¢–û–í');

async function testFallbackElimination() {
  try {
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º conversation-engine-semantic-provider...');
    
    // –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ require
    const provider = require('./server/conversation-engine-semantic-provider.cjs');
    
    console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(provider));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const testQueries = [
      '—Å—É—á–∫–∞',
      '—á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑',
      '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å',
      '–¥–∞–π–¥–∞–π –¥–∞'
    ];
    
    for (const query of testQueries) {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: "${query}"`);
      
      const canHandle = provider.canHandle(query, {});
      console.log('‚ùì canHandle —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', canHandle);
      
      if (canHandle) {
        const result = await provider.processRequest(query, {
          userId: 'test',
          sessionId: 'test'
        });
        
        console.log('üìù –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('Response –¥–ª–∏–Ω–∞:', result.response?.length || 0);
        console.log('Provider:', result.provider);
        console.log('Method:', result.method);
        console.log('Confidence:', result.confidence);
        
        // –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç fallback —Ñ—Ä–∞–∑—ã
        if (result.response) {
          const response = result.response;
          
          if (response.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!')) {
            console.log('‚ùå FALLBACK –ù–ê–ô–î–ï–ù: –°–æ–¥–µ—Ä–∂–∏—Ç "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!"');
          } else if (response.includes('–ø–æ–±–æ–ª—Ç–∞—Ç—å')) {
            console.log('‚ùå FALLBACK –ù–ê–ô–î–ï–ù: –°–æ–¥–µ—Ä–∂–∏—Ç "–ø–æ–±–æ–ª—Ç–∞—Ç—å"');
          } else if (response.includes('–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å') && response.length < 100) {
            console.log('‚ùå FALLBACK –ù–ê–ô–î–ï–ù: –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å "–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"');
          } else if (response.length < 50) {
            console.log('‚ùå FALLBACK –ù–ê–ô–î–ï–ù: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç');
          } else {
            console.log('‚úÖ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù');
          }
          
          console.log('üìã –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', response.substring(0, 100) + '...');
        } else {
          console.log('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        }
      } else {
        console.log('‚è≠Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFallbackElimination();