/**
 * üéØ –¢–ï–°–¢ SEMANTIC ROUTER –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É semantic router + conversation engine + neural network
 */

const { analyzeAndRoute } = require('./server/semantic-router.cjs');

async function testSemanticRouterIntegration() {
  console.log('üéØ –¢–ï–°–¢ SEMANTIC ROUTER –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('=====================================');
  
  const testQueries = [
    // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (express —Ä–µ–∂–∏–º)
    { text: '–ø—Ä–∏–≤–µ—Ç', expectedMode: 'express', expectedComplexity: 0.1 },
    { text: '–∫–∞–∫ –¥–µ–ª–∞', expectedMode: 'express', expectedComplexity: 0.1 },
    { text: '—Å–ø–∞—Å–∏–±–æ', expectedMode: 'express', expectedComplexity: 0.1 },
    
    // –°—Ä–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã (standard —Ä–µ–∂–∏–º)
    { text: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', expectedMode: 'standard', expectedComplexity: 0.5 },
    { text: '—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏', expectedMode: 'standard', expectedComplexity: 0.6 },
    { text: '–ø–æ–º–æ–≥–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–∏–∑–∞–π–Ω–∞', expectedMode: 'standard', expectedComplexity: 0.4 },
    
    // –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (expert —Ä–µ–∂–∏–º)
    { text: '–ø—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞', expectedMode: 'expert', expectedComplexity: 0.8 },
    { text: '—Å–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', expectedMode: 'expert', expectedComplexity: 0.9 },
    
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    { text: '—Å–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏ —Å —Ü–≤–µ—Ç–∞–º–∏', expectedMode: 'specialized', expectedComplexity: 0.8 },
    { text: '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG —Ñ–æ—Ä–º–∞—Ç', expectedMode: 'specialized', expectedComplexity: 0.7 },
    { text: '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –¥—Ä–∞–∫–æ–Ω–æ–º', expectedMode: 'specialized', expectedComplexity: 0.6 }
  ];
  
  let passedTests = 0;
  let totalTests = testQueries.length;
  
  for (const query of testQueries) {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${query.text}"`);
    
    try {
      const result = await analyzeAndRoute(query.text);
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:`, {
        complexity: result.complexity.toFixed(2),
        strategy: result.routingStrategy,
        category: result.specialCategory,
        mode: result.routingHints?.mode,
        useNeural: result.routingHints?.useNeural,
        timeLimit: result.routingHints?.timeLimit
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
      const modeMatch = result.routingStrategy === query.expectedMode;
      const complexityInRange = Math.abs(result.complexity - query.expectedComplexity) <= 0.3;
      
      if (modeMatch && complexityInRange) {
        console.log(`‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: —Ä–µ–∂–∏–º ${result.routingStrategy}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å ${result.complexity.toFixed(2)}`);
        passedTests++;
      } else {
        console.log(`‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù:`);
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∂–∏–º: ${query.expectedMode}, –ø–æ–ª—É—á–µ–Ω: ${result.routingStrategy}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ~${query.expectedComplexity}, –ø–æ–ª—É—á–µ–Ω–∞: ${result.complexity.toFixed(2)}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:`, error.message);
    }
  }
  
  console.log(`\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  
  // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  console.log('\nüîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('==========================');
  
  try {
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const routingDecision = await analyzeAndRoute('–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞');
    console.log('üéØ Routing decision –¥–ª—è "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞":', routingDecision.routingStrategy);
    
    const response = await conversationEngine.processUserInput('–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞', {
      routingHints: routingDecision.routingHints
    });
    
    console.log('‚úÖ Conversation Engine –æ—Ç–≤–µ—Ç:', response.reply?.substring(0, 200) + '...');
    console.log('üéØ Routing info –ø–µ—Ä–µ–¥–∞–Ω:', response.metadata?.routingInfo ? '–î–∞' : '–ù–µ—Ç');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testSemanticRouterIntegration().catch(console.error);
}

module.exports = { testSemanticRouterIntegration };