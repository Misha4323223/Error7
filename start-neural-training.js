
#!/usr/bin/env node

/**
 * üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø 12-–°–õ–û–ô–ù–û–ô –ù–ï–ô–†–û–°–ï–¢–ò
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */

const { initializeNeuralIntegration } = require('./server/neural-integration.cjs');

async function startNeuralTraining() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–• –ó–ê–î–ê–ß –ù–ï–ô–†–û–°–ï–¢–ò');
  console.log('=====================================');
  
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log('üîß 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    const neuralIntegration = await initializeNeuralIntegration();
    
    if (!neuralIntegration.isInitialized) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å');
    }
    
    console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
    console.log('üìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
    const stats = neuralIntegration.getSystemStats();
    
    console.log('üß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏:');
    console.log(`   - –°–ª–æ–∏: ${stats.neural?.numLayers || 'N/A'}`);
    console.log(`   - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${stats.neural?.totalParams || 'N/A'}`);
    console.log(`   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.neural?.architecture || 'N/A'}`);
    console.log(`   - –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${stats.neural?.positionEncoding || 'N/A'}`);
    console.log(`   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: ${stats.neural?.memoryOptimization || 'N/A'}`);
    
    // 3. –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    console.log('üî• 3. –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...');
    
    const trainingResults = await neuralIntegration.trainNeuralNetwork({
      epochs: 8,
      batchSize: 12,
      learningRate: 0.00005,
      validationSplit: 0.15,
      useGradientCheckpointing: true,
      useMixedPrecision: true
    });
    
    console.log('üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('===============================');
    
    // 4. –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:');
    console.log(`   - –°—Ä–µ–¥–Ω—è—è –ø–æ—Ç–µ—Ä—è: ${trainingResults.trainingHistory?.history?.loss?.[0]?.toFixed(4) || 'N/A'}`);
    console.log(`   - –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: ${trainingResults.qualityMetrics?.averageQuality?.toFixed(2) || 'N/A'}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(trainingResults.qualityMetrics?.successRate * 100)?.toFixed(1) || 'N/A'}%`);
    
    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üß™ 5. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    const testQueries = [
      '–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω–∞',
      '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É',
      '–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤',
      '–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º',
      '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏'
    ];
    
    console.log('üîç –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
    for (const query of testQueries) {
      try {
        const response = await neuralIntegration.generateHybridResponse(query, { temperature: 0.7 });
        console.log(`   ‚úÖ "${query}" -> "${response.substring(0, 100)}..."`);
      } catch (error) {
        console.log(`   ‚ùå "${query}" -> –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    console.log('üéØ –í–°–ï –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´!');
    console.log('===================================');
    console.log('‚úÖ Rotary Position Embeddings - –í–ù–ï–î–†–ï–ù–´');
    console.log('‚úÖ –í–µ—Å–æ–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û');
    console.log('‚úÖ 12-—Å–ª–æ–π–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å - –û–ë–£–ß–ï–ù–ê');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startNeuralTraining().catch(console.error);
}

module.exports = { startNeuralTraining };
