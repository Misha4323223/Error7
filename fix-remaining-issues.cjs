/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö
 * –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');

async function fixRemainingIssues() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–°–¢–ê–í–®–ò–ï–°–Ø –ü–†–û–ë–õ–ï–ú–´');
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-integration-layer.cjs
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-integration-layer.cjs...');
  if (fs.existsSync('server/semantic-integration-layer.cjs')) {
    let content = fs.readFileSync('server/semantic-integration-layer.cjs', 'utf8');
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è naturalLanguageGenerator
    content = content.replace(/const naturalLanguageGenerator = /g, (match, offset) => {
      const beforeMatch = content.substring(0, offset);
      if (beforeMatch.includes('const naturalLanguageGenerator = ')) {
        return '// naturalLanguageGenerator = ';
      }
      return match;
    });
    
    fs.writeFileSync('server/semantic-integration-layer.cjs', content, 'utf8');
    console.log('‚úÖ semantic-integration-layer.cjs –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º smart-router.js  
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º smart-router.js...');
  if (fs.existsSync('server/smart-router.js')) {
    let content = fs.readFileSync('server/smart-router.js', 'utf8');
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è provider
    let providerCount = 0;
    content = content.replace(/const provider = /g, (match) => {
      providerCount++;
      if (providerCount > 1) {
        return '// provider = ';
      }
      return match;
    });
    
    fs.writeFileSync('server/smart-router.js', content, 'utf8');
    console.log('‚úÖ smart-router.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º routes.ts
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º routes.ts...');
  if (fs.existsSync('server/routes.ts')) {
    let content = fs.readFileSync('server/routes.ts', 'utf8');
    
    // –ë–æ–ª–µ–µ —É–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ TypeScript
    const duplicateVars = ['filePath', 'moduleName', 'status', 'results', 'result', 'userId', 'sessions', 'sessionId', 'messageData', 'aiResponse', 'aiMessageData', 'token', 'response', 'claudeProvider', 'ollamaResponse', 'ollamaProvider', 'uploadedImage'];
    
    for (const varName of duplicateVars) {
      const regex = new RegExp(`(const|let|var)\\s+${varName}\\s*=`, 'g');
      let count = 0;
      content = content.replace(regex, (match) => {
        count++;
        if (count > 1) {
          return `// ${match}`;
        }
        return match;
      });
    }
    
    fs.writeFileSync('server/routes.ts', content, 'utf8');
    console.log('‚úÖ routes.ts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-memory/index.cjs
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-memory/index.cjs...');
  if (fs.existsSync('server/semantic-memory/index.cjs')) {
    let content = fs.readFileSync('server/semantic-memory/index.cjs', 'utf8');
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è module –∏ moduleName
    content = content.replace(/const module = /g, (match, offset) => {
      const beforeMatch = content.substring(0, offset);
      if (beforeMatch.includes('const module = ')) {
        return '// module = ';
      }
      return match;
    });
    
    content = content.replace(/const moduleName = /g, (match, offset) => {
      const beforeMatch = content.substring(0, offset);
      if (beforeMatch.includes('const moduleName = ')) {
        return '// moduleName = ';
      }
      return match;
    });
    
    fs.writeFileSync('server/semantic-memory/index.cjs', content, 'utf8');
    console.log('‚úÖ semantic-memory/index.cjs –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  console.log('‚úÖ –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  fixRemainingIssues().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
    process.exit(1);
  });
}

module.exports = { fixRemainingIssues };