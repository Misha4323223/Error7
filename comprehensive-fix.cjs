/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
 * –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */

const fs = require('fs');

async function comprehensiveFix() {
  console.log('üîß –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú');
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-integration-layer.cjs
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-integration-layer.cjs...');
  if (fs.existsSync('server/semantic-integration-layer.cjs')) {
    let content = fs.readFileSync('server/semantic-integration-layer.cjs', 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è naturalLanguageGenerator
    const lines = content.split('\n');
    let firstNLGFound = false;
    
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].includes('const naturalLanguageGenerator =') || lines[i].includes('let naturalLanguageGenerator =')) {
        if (firstNLGFound) {
          // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
          lines[i] = lines[i].replace(/(?:const|let)\s+naturalLanguageGenerator/, 'naturalLanguageGenerator');
        } else {
          firstNLGFound = true;
        }
      }
    }
    
    content = lines.join('\n');
    fs.writeFileSync('server/semantic-integration-layer.cjs', content, 'utf8');
    console.log('‚úÖ semantic-integration-layer.cjs –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º smart-router.js
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º smart-router.js...');
  if (fs.existsSync('server/smart-router.js')) {
    let content = fs.readFileSync('server/smart-router.js', 'utf8');
    
    const lines = content.split('\n');
    let firstProviderFound = false;
    
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].includes('const provider =') || lines[i].includes('let provider =')) {
        if (firstProviderFound) {
          lines[i] = lines[i].replace(/(?:const|let)\s+provider/, 'provider');
        } else {
          firstProviderFound = true;
        }
      }
    }
    
    content = lines.join('\n');
    fs.writeFileSync('server/smart-router.js', content, 'utf8');
    console.log('‚úÖ smart-router.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º routes.ts —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º routes.ts...');
  if (fs.existsSync('server/routes.ts')) {
    let content = fs.readFileSync('server/routes.ts', 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏/–±–ª–æ–∫–∏ –ø–æ app. –∏ router.
    const functionBlocks = content.split(/(app\.|router\.)/);
    
    for (let blockIndex = 1; blockIndex < functionBlocks.length; blockIndex += 2) {
      let block = functionBlocks[blockIndex + 1];
      if (!block) continue;
      
      // –í –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const duplicateVars = ['timestamp', 'filePath', 'moduleName', 'status', 'results', 'result', 'userId', 'sessions', 'sessionId', 'messageData', 'aiResponse', 'aiMessageData', 'token', 'response', 'claudeProvider', 'ollamaResponse', 'ollamaProvider', 'uploadedImage'];
      
      for (const varName of duplicateVars) {
        const regex = new RegExp(`(const|let|var)\\s+${varName}\\s*=`, 'g');
        let count = 0;
        block = block.replace(regex, (match) => {
          count++;
          if (count > 1) {
            return `${varName} =`;
          }
          return match;
        });
      }
      
      functionBlocks[blockIndex + 1] = block;
    }
    
    content = functionBlocks.join('');
    fs.writeFileSync('server/routes.ts', content, 'utf8');
    console.log('‚úÖ routes.ts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-memory/index.cjs —Å —É—á–µ—Ç–æ–º scope
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º semantic-memory/index.cjs...');
  if (fs.existsSync('server/semantic-memory/index.cjs')) {
    let content = fs.readFileSync('server/semantic-memory/index.cjs', 'utf8');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    const lines = content.split('\n');
    const declaredVars = new Set();
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const match = line.match(/^\s*(const|let|var)\s+(\w+)\s*=/);
      if (match) {
        const varName = match[2];
        if (declaredVars.has(varName)) {
          // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
          lines[i] = line.replace(/^\s*(const|let|var)\s+/, '    ');
        } else {
          declaredVars.add(varName);
        }
      }
    }
    
    content = lines.join('\n');
    fs.writeFileSync('server/semantic-memory/index.cjs', content, 'utf8');
    console.log('‚úÖ semantic-memory/index.cjs –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
  }

  console.log('‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  comprehensiveFix().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { comprehensiveFix };