/**
 * üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ù–ï–ô–†–û–°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
 */

const { initializeNeuralIntegration } = require('./server/neural-integration.cjs');

async function testNeuralQuick() {
  console.log('üß† –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ù–ï–ô–†–û–°–ï–¢–ò');
  console.log('=' .repeat(40));

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
    const neuralIntegration = await initializeNeuralIntegration();
    
    if (!neuralIntegration.isInitialized) {
      console.log('‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return false;
    }

    console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = neuralIntegration.getSystemStats();
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
    console.log(`  - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${stats.neural?.architecture || 'N/A'}`);
    console.log(`  - –°–ª–æ–∏: ${stats.neural?.numLayers || 'N/A'}`);
    console.log(`  - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${stats.neural?.totalParams?.toLocaleString() || 'N/A'}`);
    console.log(`  - –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${stats.modelLoaded}`);
    console.log(`  - –°–µ–º–∞–Ω—Ç–∏–∫–∞: ${stats.semantic}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log('\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞...');
    const testInput = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
    
    const response = await neuralIntegration.generateHybridResponse(testInput, {
      temperature: 0.7,
      maxTokens: 100,
      context: { sessionId: 'test', userId: 'user' }
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log(`  - –î–ª–∏–Ω–∞: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`  - –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: "${response.substring(0, 120)}"`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    const testQueries = [
      "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
      "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞",
      "–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º"
    ];

    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤:');
    
    for (const query of testQueries) {
      try {
        const result = await neuralIntegration.generateHybridResponse(query, {
          temperature: 0.8,
          maxTokens: 80,
          context: { sessionId: 'test', userId: 'user' }
        });
        
        console.log(`‚úÖ "${query}" ‚Üí ${result.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      } catch (error) {
        console.log(`‚ùå "${query}" ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testNeuralQuick()
    .then(success => {
      if (success) {
        console.log('\nüöÄ –ù–ï–ô–†–û–°–ï–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!');
        process.exit(0);
      } else {
        console.log('\n‚ö†Ô∏è –ù–ï–ô–†–û–°–ï–¢–¨ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
      process.exit(1);
    });
}

module.exports = { testNeuralQuick };