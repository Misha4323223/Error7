/**
 * üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

const tf = require('@tensorflow/tfjs-node');
const { BooomerangsNeuralCore } = require('./server/neural-network-core.cjs');

async function testNeuralNetworkFix() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...');
  
  try {
    // 1. –°–û–ó–î–ê–ù–ò–ï –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò
    console.log('üìã –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...');
    const neuralCore = new BooomerangsNeuralCore();
    
    // 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    console.log('üìã –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...');
    await neuralCore.initialize();
    
    // 3. –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò
    console.log('üìã –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...');
    if (neuralCore.model) {
      console.log('‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
      const modelInfo = {
        inputs: neuralCore.model.inputs.length,
        outputs: neuralCore.model.outputs.length,
        layers: neuralCore.model.layers.length,
        params: neuralCore.model.countParams()
      };
      
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:');
      console.log(`  - –í—Ö–æ–¥—ã: ${modelInfo.inputs}`);
      console.log(`  - –í—ã—Ö–æ–¥—ã: ${modelInfo.outputs}`);
      console.log(`  - –°–ª–æ–∏: ${modelInfo.layers}`);
      console.log(`  - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${modelInfo.params.toLocaleString()}`);
      
      // 4. –¢–ï–°–¢–û–í–´–ô –ü–†–û–ì–û–ù
      console.log('üìã –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω –º–æ–¥–µ–ª–∏...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const batchSize = 2;
      const seqLength = neuralCore.maxSequenceLength; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
      
      const testInput = tf.randomUniform([batchSize, seqLength], 0, neuralCore.vocabSize, 'int32');
      const testPositions = tf.range(0, seqLength).expandDims(0).tile([batchSize, 1]);
      
      console.log(`  - –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: [${batchSize}, ${seqLength}]`);
      console.log(`  - –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: ${neuralCore.vocabSize}`);
      
      // –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
      const prediction = neuralCore.model.predict([testInput, testPositions]);
      
      console.log(`‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –§–æ—Ä–º–∞: [${prediction.shape}]`);
      
      // 5. –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê
      console.log('üìã –≠—Ç–∞–ø 5: –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞...');
      
      const testResponse = await neuralCore.generateResponse('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?');
      console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: "${testResponse}"`);
      
      // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
      testInput.dispose();
      testPositions.dispose();
      prediction.dispose();
      
    } else {
      console.log('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
      return false;
    }
    
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ LayerNormalization –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ Position embeddings —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error.message);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testNeuralNetworkFix()
    .then(success => {
      if (success) {
        console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
        process.exit(0);
      } else {
        console.log('\nüí• –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
      process.exit(1);
    });
}

module.exports = { testNeuralNetworkFix };