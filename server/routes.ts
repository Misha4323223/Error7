import express, { type Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupWebSocket } from "./ws";
import { setupProxyMiddleware } from "./middleware/proxy";
import { authMiddleware } from "./middleware/auth";
import { z } from "zod";
import { authSchema, messageSchema } from "@shared/schema";
import { logger, chatLogger } from "./logger";

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = {
  info: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`üîµ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  success: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`‚úÖ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  error: (message: string, error?: any) => {
    const timestamp = new Date().toISOString();
    console.error(`‚ùå [${timestamp}] ${message}`, error ? error : '');
  },
  warning: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.warn(`‚ö†Ô∏è [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  ai: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`ü§ñ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
import * as path from 'path';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ ES imports
import cors from 'cors';
import fs from 'fs';
import multer from 'multer';
// path —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ –∫–∞–∫ ES module

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(import.meta.url);

// –ò–º–ø–æ—Ä—Ç conversation-engine —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ smart-router

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});
// Dynamic imports moved to function start

export async function registerRoutes(app: Express): Promise<Server> {
  // Load CommonJS modules dynamically - —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  let svgGenerator = null;
  let g4fHandlers = null;
  let directAiRoutes = null;
  let deepspeekProvider = null;
  let chatFreeProvider = null;
  
  try {
    svgGenerator = require('./svg-generator.cjs');
    Logger.info('‚úÖ SVG Generator –ø–æ–¥–∫–ª—é—á–µ–Ω');
  } catch (error) {
    Logger.warning('‚ö†Ô∏è SVG Generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  try {
    g4fHandlers = require('./g4f-handlers.cjs');
    Logger.info('‚úÖ G4F Handlers –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  } catch (error) {
    Logger.warning('‚ö†Ô∏è G4F Handlers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
  }
  
  try {
    directAiRoutes = require('./direct-ai-routes.cjs');
    Logger.info('‚úÖ Direct AI Routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  } catch (error) {
    Logger.warning('‚ö†Ô∏è Direct AI Routes –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
  }
  
  // üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ semantic router
  let neuralApiRoutes = null;
  let semanticRouter = null;
  
  try {
    neuralApiRoutes = require('./neural-api-routes.js');
    semanticRouter = require('./semantic-router.cjs');
    Logger.info('‚úÖ Neural API –∏ Semantic Router –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  } catch (error) {
    Logger.warning('‚ö†Ô∏è Neural API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  // Create HTTP server
  const httpServer = createServer(app);

  // Setup WebSocket server
  setupWebSocket(httpServer, storage);

  // Setup proxy middleware
  setupProxyMiddleware(app);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  app.use(express.static(path.join(process.cwd())));

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤—ã—à–∏–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  app.get('/output/embroidery/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join(process.cwd(), 'output', 'embroidery', filename);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const ext = path.extname(filename).toLowerCase();
    let contentType = 'application/octet-stream';

    if (ext === '.exp') contentType = 'application/x-melco-exp';
    else if (ext === '.dst') contentType = 'application/x-tajima-dst';
    else if (ext === '.pes') contentType = 'application/x-brother-pes';
    else if (ext === '.jef') contentType = 'application/x-janome-jef';
    else if (ext === '.vp3') contentType = 'application/x-husqvarna-vp3';
    else if (ext === '.png') contentType = 'image/png';
    else if (ext === '.json') contentType = 'application/json';

    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.sendFile(filePath);
  });

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.use('/image-generator', (req, res) => {
    res.redirect('/api/svg');
  });

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (svgGenerator) {
    app.use('/api/svg', svgGenerator);
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  app.use('/api/search', require('./search-routes'));

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å AI
  const aiImageGenerator = require('./ai-image-generator');

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  app.post("/api/ai-image/generate", async (req, res) => {
    try {
      const { prompt, style = 'realistic' } = req.body;

      if (!prompt) {
        return res.status(400).json({ 
          success: false, 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (prompt)'
        });
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const result = await aiImageGenerator.generateImage(prompt, style);

      res.json(result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }
  });

  // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  app.use('/output', (req, res, next) => {
    const outputPath = path.join(__dirname, '..', 'output');
    // const filePath = path.join(outputPath, req.path);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä download –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if (req.query.download === 'true') {
      const fileName = path.basename(req.path);
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.setHeader('Content-Type', 'application/octet-stream');
    }

    res.sendFile(req.path, { root: outputPath });
  });

  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  app.get('/test', (req, res) => {
    res.sendFile('test-page.html', { root: '.' });
  });

  // –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/demo', (req, res) => {
    res.sendFile('demo.html', { root: '.' });
  });

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - BOOOMERANGS Smart Chat
  app.get('/', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ HTML —á–∞—Ç—É
  app.get('/smart-chat', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏
  app.get('/debug', (req, res) => {
    res.sendFile('debug-info.html', { root: '.' });
  });

  // G4F —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/g4f-chat', (req, res) => {
    res.sendFile('g4f-chat.html', { root: '.' });
  });

  // –ü—Ä–æ—Å—Ç–æ–π G4F —Ç–µ—Å—Ç
  app.get('/simple-g4f', (req, res) => {
    res.sendFile('simple-g4f.html', { root: '.' });
  });

  // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç G4F
  app.get('/direct-g4f', (req, res) => {
    res.sendFile('direct-g4f-test.html', { root: '.' });
  });

  // –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è G4F —á–∞—Ç–∞
  app.get('/standalone', (req, res) => {
    res.sendFile('standalone-g4f.html', { root: '.' });
  });

  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  app.get('/booom', (req, res) => {
    res.sendFile('booomerangs-main.html', { root: '.' });
  });

  // BOOOMERANGS –Ω–æ–≤—ã–π –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
  app.get('/ai', (req, res) => {
    res.sendFile('booomerangs-direct.html', { root: '.' });
  });

  // BOOOMERANGS –Ω–æ–≤—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/new', (req, res) => {
    res.sendFile('booomerangs-new.html', { root: '.' });
  });

  // BOOOMERANGS —á–∞—Ç —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (–ø—Ä—è–º–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
  app.get('/chat-ai', (req, res) => {
    res.sendFile('booomerangs-chat.html', { root: '.' });
  });

  // BOOOMERANGS —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—á–∞—Ç + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
  app.get('/unified', (req, res) => {
    res.sendFile('public/unified-interface.html', { root: '.' });
  });

  // BOOOMERANGS —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/fixed', (req, res) => {
    res.sendFile('public/fixed-interface.html', { root: '.' });
  });

  // BOOOMERANGS —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/image-generator', (req, res) => {
    res.sendFile('public/image-generator.html', { root: '.' });
  });

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã—à–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ download

  // BOOOMERANGS AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/ai-images', (req, res) => {
    res.sendFile('public/ai-image-app.html', { root: '.' });
  });

  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
  app.get('/booom-streaming', (req, res) => {
    res.sendFile('booomerangs-app-streaming-fixed.html', { root: '.' });
  });

  // BOOOMERANGS —Å Qwen AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  app.get('/qwen', (req, res) => {
    res.sendFile('booomerangs-qwen.html', { root: '.' });
  });

  // BOOOMERANGS —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –æ—Ç–≤–µ—Ç–æ–≤
  app.get('/streaming', (req, res) => {
    res.sendFile('booomerangs-streaming.html', { root: '.' });
  });

  // BOOOMERANGS –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/quick', (req, res) => {
    res.sendFile('booomerangs-quick.html', { root: '.' });
  });

  // BOOOMERANGS —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/stable', (req, res) => {
    res.sendFile('booomerangs-stable.html', { root: '.' });
  });

  // BOOOMERANGS —Å Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º (—Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/flask', (req, res) => {
    res.sendFile('booomerangs-flask-stream.html', { root: '.' });
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  app.get('/logs', (req, res) => {
    res.sendFile('logs-viewer.html', { root: '.' });
  });



  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —É–º–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
  app.get('/smart-chat', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  app.get('/team-chat', (req, res) => {
    res.sendFile('team-chat.html', { root: '.' });
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
  if (g4fHandlers) {
    app.use('/api/g4f', g4fHandlers);
  }

  // API —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  if (directAiRoutes) {
    app.use('/api/direct-ai', directAiRoutes);
  }

  // API —Å Python-–≤–µ—Ä—Å–∏–µ–π G4F
  // app.use('/api/python', pythonProviderRoutes.router); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –≠–¢–ê–ü 6: API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
  app.get('/api/semantic/dashboard', async (req, res) => {
    try {
      const { globalDashboard } = require('./semantic-monitor-dashboard.cjs');
      const dashboardData = globalDashboard.getDashboardData();
      res.json(dashboardData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' });
    }
  });

  // API –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
  app.post('/api/semantic/alerts/:alertId/resolve', async (req, res) => {
    try {
      const { globalDashboard } = require('./semantic-monitor-dashboard.cjs');
      const alertId = parseInt(req.params.alertId);
      globalDashboard.resolveAlert(alertId);
      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞' });
    }
  });

  // API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è
  app.get('/api/semantic/modules/:moduleName/stats', async (req, res) => {
    try {
      const { globalDashboard } = require('./semantic-monitor-dashboard.cjs');
      const moduleName = req.params.moduleName;
      const stats = globalDashboard.getSystemStatistics();
      const moduleData = stats.modules.find(m => m.name === moduleName);

      if (!moduleData) {
        return res.status(404).json({ error: '–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      res.json(moduleData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è' });
    }
  });

  // API –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è
  app.post('/api/semantic/modules/:moduleName/reset', async (req, res) => {
    try {
      const { globalDashboard } = require('./semantic-monitor-dashboard.cjs');
      // const moduleName = req.params.moduleName;
      globalDashboard.resetModuleStats(moduleName);
      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è' });
    }
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
  app.get('/semantic-monitor', (req, res) => {
    res.sendFile('semantic-monitor-dashboard.html', { root: '.' });
  });

  // API –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö stream=True
  const streamingRoutes = require('./streaming-routes');
  app.use('/api/streaming', streamingRoutes);

  // API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/semantic/status', async (req, res) => {
    try {
      Logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...');

      const semanticMemory = require('./semantic-memory/index.cjs');
      await semanticMemory.initializationPromise;

      const systemStats = semanticMemory.getSystemStatistics();
      const moduleChecker = semanticMemory.moduleChecker;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
      const criticalModules = ['natural-language-generator', 'semantic-analyzer', 'meta-semantic-engine', 'emotional-semantic-matrix'];
      const criticalStatus = {};

      for (const moduleName of criticalModules) {
        const status = moduleChecker.getModuleStatus(moduleName);
        criticalStatus[moduleName] = {
          available: status.available,
          reason: status.reason,
          lastCheck: new Date(status.lastCheck).toISOString()
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º conversation-engine
      let conversationEngineStatus = 'unknown';
      try {
        const testResult = await conversationEngine.processUserInput('test', { userId: 'diagnostic' });
        conversationEngineStatus = testResult ? 'operational' : 'error';
      } catch (error) {
        conversationEngineStatus = `error: ${error.message}`;
      }

      const healthScore = systemStats.systemHealth || 0;
      const overallStatus = healthScore > 0.8 ? 'excellent' : 
                           healthScore > 0.6 ? 'good' : 
                           healthScore > 0.4 ? 'degraded' : 'critical';

      res.json({
        success: true,
        timestamp: new Date().toISOString(),
        overallStatus,
        healthScore: Math.round(healthScore * 100),

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
        moduleStats: {
          totalModules: systemStats.totalModules,
          activeModules: systemStats.activeModules,
          availabilityRate: `${Math.round((systemStats.activeModules / systemStats.totalModules) * 100)}%`
        },

        // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏
        criticalModules: criticalStatus,

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        coreComponents: {
          conversationEngine: conversationEngineStatus,
          semanticMemory: systemStats.realModulesActive ? 'operational' : 'degraded',
          initializationComplete: systemStats.initializationComplete
        },

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        recommendedLevel: healthScore > 0.8 ? 1 : 
                         healthScore > 0.6 ? 2 : 
                         healthScore > 0.4 ? 3 : 4,

        levelDescriptions: {
          1: '–ü–æ–ª–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (50+ –º–æ–¥—É–ª–µ–π)',
          2: '–ë–∞–∑–æ–≤–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (10 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π)',
          3: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª—è)',
          4: 'Fallback —Ä–µ–∂–∏–º (–∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º)'
        }
      });

    } catch (error) {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
        overallStatus: 'error'
      });
    }
  });

  // ImageTracerJS –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –Ω–∞ –ø–æ—Ä—Ç—É 5006
  // –°—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã /api/vectorizer —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–æ–º

  // –°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
  app.get('/api/vectorizer-status', async (req, res) => {
    try {
      const vectorizerManager = require('./vectorizer-manager');
      // const status = await vectorizerManager.checkHealth();
      res.json({
        success: true,
        vectorizer: status,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.json({
        success: false,
        vectorizer: { status: 'unavailable', available: false },
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/system-health', async (req, res) => {
    try {
      const { SystemHealthChecker } = require('./system-health-checker');
      const checker = new SystemHealthChecker();
      const results = await checker.performFullHealthCheck();
      res.json({
        success: true,
        ...results
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ endpoints
  app.get('/api/test-vectorizer', async (req, res) => {
    try {
      const fetch = require('node-fetch');
      const endpoints = [
        'http://localhost:5006/health',
        'http://localhost:5006/api/vectorizer/health',
        'http://localhost:5006/api/vectorizer/formats'
      ];

      const results = {};

      for (const endpoint of endpoints) {
        try {
          const response = await fetch(endpoint, { timeout: 3000 });
          const data = await response.json();
          results[endpoint] = {
            status: response.status,
            ok: response.ok,
            data: data
          };
        } catch (error) {
          results[endpoint] = {
            error: error.message,
            accessible: false
          };
        }
      }

      res.json({
        success: true,
        vectorizerEndpoints: results,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // API –¥–ª—è Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–Ω–∞–¥–µ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  const flaskStreamBridge = require('./stream-flask-bridge');
  app.use('/api/flask-stream', flaskStreamBridge);

  // DeepSpeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã

  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)

  // API –¥–ª—è Ollama - –ª–æ–∫–∞–ª—å–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  try {
    const ollamaProvider = require('./ollama-provider');
    if (ollamaProvider) {
      app.use('/api/ollama', ollamaProvider);
    }
  } catch (error) {
    Logger.warning('‚ö†Ô∏è Ollama provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  // API –¥–ª—è ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  if (chatFreeProvider) {
    app.use('/api/chatfree', chatFreeProvider);
  }

  // API –¥–ª—è Claude –æ—Ç Anthropic —á–µ—Ä–µ–∑ Python G4F
  try {
    const claudeProvider = require('./claude-provider');
    if (claudeProvider) {
      app.use('/api/claude', claudeProvider);
    }
  } catch (error) {
    Logger.warning('‚ö†Ô∏è Claude provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  // API –¥–ª—è DeepInfra - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
  try {
    const deepInfraProvider = require('./deepinfra-provider');
    if (deepInfraProvider) {
      app.use('/api/deepinfra', deepInfraProvider);
    }
  } catch (error) {
    Logger.warning('‚ö†Ô∏è DeepInfra provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  // API –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  try {
    const multimodalProvider = require('./multimodal-provider');
    if (multimodalProvider) {
      app.use('/api/multimodal', multimodalProvider);
    }
  } catch (error) {
    Logger.warning('‚ö†Ô∏è Multimodal provider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  // API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã—à–∏–≤–∫–∏
  const embroideryRoutes = require('./embroidery-routes');
  app.use('/api/embroidery', embroideryRoutes);

  // API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)

  // API –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
  const smartRouter = require('./smart-router-wrapper.cjs');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  app.post('/api/smart/chat', async (req, res) => {
    try {
      const { message, options = {} } = req.body;
      if (!message) {
        return res.status(400).json({ success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
      }

      // const result = await smartRouter.getChatResponse(message, options);
      res.json({ success: true, ...result });
    } catch (error) {
      console.error('Smart router error:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  // API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
  const chatHistory = require('./chat-history');
  const { insertChatSessionSchema, insertAiMessageSchema } = require('@shared/schema');

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.post('/api/chat/sessions', async (req, res) => {
    try {
      const { userId, title } = req.body;

      if (!userId || !title) {
        return res.status(400).json({ 
          success: false, 
          error: 'userId –∏ title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const session = await chatHistory.createChatSession(userId, title);
      res.json({ success: true, session });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  app.get('/api/chat/sessions', async (req, res) => {
    try {
      const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.delete('/api/chat/sessions/:sessionId', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId}`);

      const deleteResult = await chatHistory.deleteSession(sessionId);

      if (deleteResult) {
        console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞' });
      } else {
        console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/chat/sessions/:userId', async (req, res) => {
    try {
      // const userId = parseInt(req.params.userId);
      // const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º
  app.post('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    console.log('üö®üö®üö® –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö /api/chat/sessions/:sessionId/messages');
    console.log('üö® –ó–ê–ü–†–û–° –ö /api/chat/sessions/:sessionId/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    console.log('üÜî ID —Å–µ—Å—Å–∏–∏:', req.params.sessionId);
    try {
      const sessionId = parseInt(req.params.sessionId);
      const messageData = { 
        ...req.body, 
        sessionId,
        timestamp: new Date().toISOString()
      };

      console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData);
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const userMessage = await chatHistory.saveMessage(messageData);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º smart-router –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
          console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º smart-router –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');

          const aiResponse = await smartRouter.getChatResponse(messageData.content, {
            userId: `session_${sessionId}`,
            sessionId: sessionId
          });

          console.log('üéØ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞:', aiResponse);
          console.log('üîç –ü–æ–ª—è –æ—Ç–≤–µ—Ç–∞ AI:', {
            hasResponse: !!aiResponse?.response,
            type: aiResponse?.type,
            responsePreview: aiResponse?.response?.substring(0, 100)
          });

          if (aiResponse && aiResponse.response) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let responseContent = aiResponse.response;

            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–∏–≤–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if (!responseContent && aiResponse.embroideryGenerated && aiResponse.embroideryFiles) {
              responseContent = `üßµ –°–æ–∑–¥–∞–Ω–∞ –≤—ã—à–∏–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!

‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –≥–æ—Ç–æ–≤–æ
‚úÖ –§–∞–π–ª –≤—ã—à–∏–≤–∫–∏ (DST): –≥–æ—Ç–æ–≤ 
‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –≥–æ—Ç–æ–≤–∞

–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.`;
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if (!responseContent) {
              responseContent = '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.';
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —Ç—É –∂–µ —Å–µ—Å—Å–∏—é
            const aiMessageData = {
              sessionId,
              content: responseContent,
              sender: 'ai',
              provider: aiResponse.provider,
              timestamp: new Date().toISOString()
            };

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ë–î:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏—é');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');
            res.json({ 
              success: true, 
              message: userMessage,
              aiResponse: responseContent,
              provider: aiResponse.provider,
              files: aiResponse.embroideryFiles || aiResponse.files || null,
              details: aiResponse.details || null,
              embroideryGenerated: aiResponse.embroideryGenerated || false,
              imageGenerated: aiResponse.imageGenerated || false
            });
            return;
          } else {
            console.log('‚ö†Ô∏è AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± AI –æ—Ç–≤–µ—Ç–µ
      res.json({ 
        success: true, 
        message: userMessage,
        hasAiResponse: messageData.sender === 'user'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å)
  app.post('/api/chat/messages', async (req, res) => {
    console.log('üö® –°–¢–ê–†–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢ /api/chat/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    try {
      const messageData = req.body;
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å:', messageData);
      const message = await chatHistory.saveMessage(messageData);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º smart-router –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
          console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º smart-router –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');

          const aiResponse = await smartRouter.getChatResponse(messageData.content, {
            userId: `session_${messageData.sessionId || 'default'}`,
            sessionId: messageData.sessionId
          });

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç smart-router –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          const processedResponse = {
            response: aiResponse?.response || 'Smart-router –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...',
            provider: aiResponse?.provider || 'BOOOMERANGS-SmartRouter',
            model: aiResponse?.model || 'smart-router'
          };

          console.log('üéØ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞:', processedResponse);

          if (processedResponse && processedResponse.response) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
            const aiMessageData = {
              ...messageData,
              content: processedResponse.response,
              sender: 'ai',
              provider: processedResponse.provider,
              timestamp: new Date().toISOString()
            };

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —á–∞—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }

      res.json({ success: true, message });
      } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  app.get('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}...`);

      const messages = await chatHistory.getSessionMessages(sessionId);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

      // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ API
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');

      res.json({ success: true, messages });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }
  });

  // API –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { users, messages } = require('@shared/schema');
  const { eq } = require('drizzle-orm');

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  app.post('/api/auth/login', async (req, res) => {
    try {
      const { username, password } = req.body;

      if (!username || !password) {
        return res.status(400).json({ 
          success: false, 
          error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.username, username));

      if (!user || user.password !== password) {
        return res.status(401).json({ 
          success: false, 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
      const token = `${user.id}_${Date.now()}_${Math.random().toString(36)}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
      await db
        .update(users)
        .set({ token, isOnline: true })
        .where(eq(users.id, user.id));

      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName,
          token
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  app.post('/api/auth/logout', async (req, res) => {
    try {
      const { token } = req.body;

      if (token) {
        const { db } = require('./db');
        await db
          .update(users)
          .set({ token: null, isOnline: false })
          .where(eq(users.token, token));
      }

      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  app.get('/api/auth/user', async (req, res) => {
    try {
      const token = req.headers.authorization?.replace('Bearer ', '');

      if (!token) {
        return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.token, token));

      if (!user) {
        return res.status(401).json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }

      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // API –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã—à–µ)

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post('/api/messages', async (req, res) => {
    try {
      const { senderId, receiverId, text } = req.body;

      if (!senderId || !receiverId || !text) {
        return res.status(400).json({ 
          success: false, 
          error: 'senderId, receiverId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [message] = await db
        .insert(messages)
        .values({ senderId, receiverId, text })
        .returning();

      res.json({ success: true, message });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  app.get('/api/messages/:userId1/:userId2', async (req, res) => {
    try {
      const { userId1, userId2 } = req.params;
      const { db } = require('./db');
      const { or, and, eq, desc } = require('drizzle-orm');

      const conversation = await db
        .select()
        .from(messages)
        .where(
          or(
            and(eq(messages.senderId, parseInt(userId1)), eq(messages.receiverId, parseInt(userId2))),
            and(eq(messages.senderId, parseInt(userId2)), eq(messages.receiverId, parseInt(userId1)))
          )
        )
        .orderBy(desc(messages.timestamp));

      res.json({ success: true, messages: conversation });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/conversations/:userId', async (req, res) => {
    try {
      const { userId } = req.params;
      const { db } = require('./db');
      const { or, eq, desc } = require('drizzle-orm');

      const conversations = await db
        .select()
        .from(messages)
        .where(
          or(
            eq(messages.senderId, parseInt(userId)),
            eq(messages.receiverId, parseInt(userId))
          )
        )
        .orderBy(desc(messages.timestamp));

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const conversationMap = new Map();
      conversations.forEach(msg => {
        const partnerId = msg.senderId === parseInt(userId) ? msg.receiverId : msg.senderId;
        if (!conversationMap.has(partnerId)) {
          conversationMap.set(partnerId, {
            partnerId,
            lastMessage: msg,
            timestamp: msg.timestamp
          });
        }
      });

      res.json({ success: true, conversations: Array.from(conversationMap.values()) });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤' });
    }
  });

  // API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imageUpload = require('./image-upload');
  app.use('/api/upload', imageUpload);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  app.use('/uploads', (req, res, next) => {
    const uploadPath = path.join(process.cwd(), 'uploads');
    res.sendFile(req.path, { root: uploadPath }, (err) => {
      if (err) next('route');
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
  (async () => {
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Python G4F...');

      // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π G4F –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
      setTimeout(async () => {
        try {
          const response = await fetch('http://localhost:5004/python/test', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: 'test' })
          });

          if (response.ok) {
            console.log('‚úÖ Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
          } else {
            console.warn('‚ö†Ô∏è Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
      }, 3000);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Python G4F:', error);
    }
  })();

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ G4F API
  async function callG4F(message: string, provider: string) {
    const startTime = Date.now();
    Logger.ai(`–ù–∞—á–∏–Ω–∞–µ–º AI –∑–∞–ø—Ä–æ—Å`, { provider, messageLength: message.length });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const directAiProvider = require('./direct-ai-provider');

      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä qwen, –∏—Å–ø–æ–ª—å–∑—É–µ–º AItianhu –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Qwen AI
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä chatfree, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      let actualProvider = provider;

      if (provider === 'qwen') {
        actualProvider = 'AItianhu';
      } else if (provider === 'claude') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude —á–µ—Ä–µ–∑ Python G4F...`);
          // const claudeProvider = require('./claude-provider');
          const claudeResponse = await claudeProvider.getClaudeResponse(message);

          if (claudeResponse.success) {
            const duration = Date.now() - startTime;
            Logger.success(`Claude –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ`, { 
              duration: `${duration}ms`, 
              responseLength: claudeResponse.response?.length || 0 
            });
            return claudeResponse;
          } else {
            throw new Error(claudeResponse.error || '–û—à–∏–±–∫–∞ Claude');
          }
        } catch (error) {
          Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Claude`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      } else if (provider === 'ollama') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama —á–µ—Ä–µ–∑ Python G4F...`);
          // const ollamaResponse = await pythonProviderRoutes.callPythonAI(message, 'Ollama'); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // ollamaResponse = null; // Python G4F –æ—Ç–∫–ª—é—á–µ–Ω

          if (ollamaResponse) {
            return {
              success: true,
              response: ollamaResponse,
              provider: 'Ollama',
              model: 'llama3'
            };
          } else {
            throw new Error('Ollama –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Python G4F');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Ollama —á–µ—Ä–µ–∑ Python:`, error);

          // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
          try {
            // const ollamaProvider = require('./ollama-provider');
            const isOllamaAvailable = await ollamaProvider.checkOllamaAvailability();

            if (isOllamaAvailable) {
              const ollamaDirectResponse = await ollamaProvider.getOllamaResponse(message);
              if (ollamaDirectResponse.success) {
                return ollamaDirectResponse;
              }
            }
          } catch (localError) {
            console.error(`‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π Ollama —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, localError);
          }

          // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
          actualProvider = 'AItianhu';
        }
      } else if (provider === 'chatfree') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è ChatFree —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        try {
          const chatFreeImproved = require('./chatfree-improved');
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é ChatFree...`);

          const chatFreeResponse = await chatFreeImproved.getChatFreeResponse(message, {
            systemPrompt: "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω."
          });

          if (chatFreeResponse.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
            return chatFreeResponse;
          } else {
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const simpleChatFree = require('./simple-chatfree');
            const simpleResponse = await simpleChatFree.getChatFreeResponse(message);

            if (simpleResponse.success) {
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
              return simpleResponse;
            }

            throw new Error(chatFreeResponse.error || '–û—à–∏–±–∫–∞ ChatFree');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ChatFree:`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await directAiProvider.getChatResponse(message, { provider: actualProvider });

      return {
        success: true,
        response: response,
        provider: actualProvider
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ G4F:`, error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG –¥–ª—è –ø–µ—á–∞—Ç–∏
  app.post('/api/convert/svg-print', upload.single('image'), async (req, res) => {
    try {
      const { printType = 'both', designName } = req.body;
      const uploadedImage = req.file;

      if (!uploadedImage) {
        return res.status(400).json({ 
          success: false, 
          error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' 
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ svg-print-converter
      const advancedVectorizer = require('../advanced-vectorizer.cjs');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const baseName = designName || `uploaded-design-${Date.now()}`;

      console.log(`üé® [SVG-CONVERT] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏
      const quality = printType === 'high' ? 'premium' : 'standard';
      const optimizeFor = 'print';

      const result = await advancedVectorizer.professionalVectorize(
        uploadedImage.buffer,
        baseName,
        {
          quality,
          formats: ['svg'],
          optimizeFor,
          includeMetadata: true
        }
      );

      if (result.success) {
        res.json({
          success: true,
          message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ SVG —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä',
          svgContent: result.main.svgContent,
          detectedType: result.main.detectedType,
          quality: result.main.quality,
          optimization: result.optimization
        });
      } else {
        res.status(500).json({
          success: false,
          error: result.error
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ SVG:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'
      });
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BOOOMERANGS AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ semantic router
  app.post('/api/ai/chat', upload.single('image'), async (req, res) => {
    const processingStartTime = Date.now();

    try {
      const { message, provider, userId = 'anonymous', sessionId = 'default' } = req.body;
      const uploadedImage = req.file;

      Logger.info('üéØ [SEMANTIC-ROUTER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ semantic router');
      Logger.info('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message?.substring(0, 100) + (message?.length > 100 ? '...' : ''));
      Logger.info('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      Logger.info('üì± ID —Å–µ—Å—Å–∏–∏:', sessionId);
      Logger.info('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', !!uploadedImage);

      if (uploadedImage) {
        Logger.info('üìÅ –§–∞–π–ª:', uploadedImage.originalname, `(${Math.round(uploadedImage.size / 1024)}KB)`);
      }

      if (!message && !uploadedImage) {
        return res.status(400).json({ 
          success: false, 
          error: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' 
        });
      }

      let finalMessage = message || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –≤–∏–¥–Ω–æ';

      // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: Semantic Router –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre-processor
      let routingDecision = null;
      let selectedProvider = provider;
      let adaptiveTimeout = 10000; // –±–∞–∑–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç

      if (semanticRouter) {
        try {
          Logger.info('üéØ –ó–ê–ü–£–°–ö SEMANTIC ROUTER PRE-PROCESSOR');
          
          routingDecision = await semanticRouter.analyzeAndRoute(finalMessage, {
            hasImage: !!uploadedImage,
            provider,
            userId,
            sessionId,
            imageInfo: uploadedImage ? {
              filename: uploadedImage.originalname,
              size: uploadedImage.size,
              mimetype: uploadedImage.mimetype
            } : null
          });

          Logger.info('üéØ Routing Analysis:', {
            complexity: routingDecision.complexity,
            strategy: routingDecision.routingStrategy,
            category: routingDecision.specialCategory,
            timeLimit: routingDecision.routingHints?.timeLimit
          });

          // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
          if (routingDecision.routingHints) {
            const hints = routingDecision.routingHints;
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
            adaptiveTimeout = hints.timeLimit || 10000;
            
            // –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ routing hints
            if (hints.preferredProviders && hints.preferredProviders.length > 0) {
              selectedProvider = hints.preferredProviders[0];
              Logger.info(`üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ routing hints: ${selectedProvider}`);
            }

            // –†–µ–∂–∏–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (hints.mode === 'express') {
              adaptiveTimeout = Math.min(adaptiveTimeout, 2000);
              Logger.info('‚ö° EXPRESS MODE: –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
            } else if (hints.mode === 'expert') {
              adaptiveTimeout = Math.max(adaptiveTimeout, 30000);
              Logger.info('üéì EXPERT MODE: –ì–ª—É–±–æ–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
            }
          }

        } catch (error) {
          Logger.warning('‚ö†Ô∏è Semantic Router error:', error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        }
      } else {
        Logger.warning('‚ö†Ô∏è Semantic Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
      }

      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Visual-Semantic –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      let visualSemanticData = null;
      if (uploadedImage && routingDecision?.routingHints?.useVisualSemantic !== false) {
        try {
          Logger.info('üé® –ê–ö–¢–ò–í–ê–¶–ò–Ø VISUAL-SEMANTIC –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
          
          const visualSemanticExtensions = require('./semantic-memory/visual-semantic-extensions.cjs');
          if (visualSemanticExtensions && visualSemanticExtensions.analyzeVisualContent) {
            visualSemanticData = await Promise.race([
              visualSemanticExtensions.analyzeVisualContent(uploadedImage.buffer, 'comprehensive'),
              new Promise((_, reject) => setTimeout(() => reject(new Error('Visual analysis timeout')), 5000))
            ]);
            Logger.info('‚úÖ Visual-Semantic –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
          }
        } catch (error) {
          Logger.warning('‚ö†Ô∏è Visual-Semantic –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º conversation-engine —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const conversationEngine = require('./conversation-engine.cjs');
      
      const enhancedContext = {
        userId,
        sessionId,
        conversationHistory: [],
        userProfile: null,
        sessionContext: {
          provider: selectedProvider,
          hasImage: !!uploadedImage,
          imageInfo: uploadedImage ? {
            filename: uploadedImage.originalname,
            size: uploadedImage.size,
            mimetype: uploadedImage.mimetype
          } : null,
          adaptiveTimeout,
          visualSemanticData
        },
        // –ü–µ—Ä–µ–¥–∞–µ–º routing hints —Å –∞–¥–∞–ø—Ç–∞—Ü–∏—è–º–∏
        routingHints: routingDecision?.routingHints ? {
          ...routingDecision.routingHints,
          timeLimit: adaptiveTimeout,
          selectedProvider,
          visualSemanticAvailable: !!visualSemanticData
        } : null
      };

      Logger.info(`üöÄ –ó–ê–ü–£–°–ö CONVERSATION ENGINE (timeout: ${adaptiveTimeout}–º—Å, provider: ${selectedProvider})`);

      const aiResponse = await Promise.race([
        conversationEngine.processUserInput(finalMessage, enhancedContext),
        new Promise((_, reject) => setTimeout(() => reject(new Error(`Timeout ${adaptiveTimeout}–º—Å`)), adaptiveTimeout))
      ]);

      const processingTime = Date.now() - processingStartTime;
      Logger.success(`‚úÖ [SEMANTIC-ROUTER] –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${processingTime}–º—Å`);

      return res.json({
        success: true,
        response: aiResponse?.reply || 'Conversation-engine –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...',
        provider: selectedProvider || 'BOOOMERANGS-SemanticRouter',
        model: 'semantic-router-v1',
        confidence: aiResponse?.confidence || 0.8,
        quality: aiResponse?.quality || 7,
        processingTime: processingTime,
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        routingInfo: routingDecision ? {
          complexity: routingDecision.complexity,
          strategy: routingDecision.routingStrategy,
          category: routingDecision.specialCategory,
          selectedProvider,
          adaptiveTimeout,
          visualSemanticUsed: !!visualSemanticData
        } : null,
        metadata: {
          semantic: true,
          autonomous: true,
          systemLevel: 'CONVERSATION_ENGINE',
          routingEnhanced: true,
          ...aiResponse?.metadata
        }
      });

    } catch (error) {
      Logger.error('‚ùå [SEMANTIC-ROUTER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);

      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ semantic-router',
        processingTime: Date.now() - processingStartTime
      });
    }
  });

  // === –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï ENDPOINTS ===
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É

  // –î–æ–±–∞–≤–ª—è–µ–º endpoint /api/smart/message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  app.post('/api/smart/message', upload.single('image'), async (req, res) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π endpoint
    req.url = '/api/ai/chat';
    return app._router.handle(req, res);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º endpoint /api/chat/smart –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  app.post('/api/chat/smart', upload.single('image'), async (req, res) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π endpoint
    req.url = '/api/ai/chat';
    return app._router.handle(req, res);
  });

  // üß† –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Neural API –º–∞—Ä—à—Ä—É—Ç—ã
  if (neuralApiRoutes && neuralApiRoutes.setupNeuralRoutes) {
    neuralApiRoutes.setupNeuralRoutes(app);
    Logger.info('‚úÖ Neural API –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // üéØ Semantic Router —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  app.get('/api/semantic-router/stats', (req, res) => {
    try {
      if (semanticRouter) {
        const stats = semanticRouter.getStats();
        res.json({ success: true, stats });
      } else {
        res.status(503).json({ success: false, error: 'Semantic Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
  });

  // === –û–°–¢–ê–õ–¨–ù–´–ï ENDPOINTS –û–°–¢–ê–Æ–¢–°–Ø –ü–†–ï–ñ–ù–ò–ú–ò ===
  // –õ–æ–≥–∏, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Å–µ—Å—Å–∏–∏ –∏ –¥—Ä—É–≥–∏–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –ø—Ä–µ–∂–¥–µ

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ endpoint
  app.get('/api/logs', (req, res) => {
    try {
      const logs = logger.getLogs();
      res.json({ success: true, logs });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤' });
    }
  });

  app.delete('/api/logs', (req, res) => {
    try {
      logger.clearLogs();
      res.json({ success: true, message: '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã' });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤' });
    }
  });

  // generateAutonomousResponse —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ smart-router

  // üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º Neural API –º–∞—Ä—à—Ä—É—Ç—ã
  try {
    const neuralRoutes = require('./neural-api-routes.js');
    if (neuralRoutes && typeof neuralRoutes.setupNeuralRoutes === 'function') {
      neuralRoutes.setupNeuralRoutes(app);
      console.log('üöÄ Neural API –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Neural API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  return httpServer;
}