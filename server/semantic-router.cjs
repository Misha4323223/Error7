/**
 * üéØ SEMANTIC ROUTER - –£–ú–ù–´–ô –î–ò–°–ü–ï–¢–ß–ï–† –ó–ê–ü–†–û–°–û–í
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∫–∞–∫ pre-processor
 */

const SmartLogger = {
  router: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üéØ [${timestamp}] SEMANTIC-ROUTER: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  analysis: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üìä [${timestamp}] COMPLEXITY-ANALYSIS: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  decision: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîç [${timestamp}] ROUTING-DECISION: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

class SemanticRouter {
  constructor() {
    this.name = 'SemanticRouter';
    this.version = '1.0.0';
    this.isInitialized = false;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    this.complexityConfig = {
      // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (0.0-0.3)
      simple: {
        keywords: ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞', '–¥–∞', '–Ω–µ—Ç', '–æ–∫'],
        patterns: [/^.{1,20}$/, /^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|—Å–ø–∞—Å–∏–±–æ|–ø–æ–∫–∞)$/i],
        timeLimit: 500,
        preferredProviders: ['Chat-Memory', 'ChatFree'],
        skipProviders: ['ConversationEngine-Semantic', 'Neural-Integration']
      },
      
      // –°—Ä–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã (0.3-0.7)
      medium: {
        keywords: ['—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–ø–æ–º–æ–≥–∏', '—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π'],
        patterns: [/^.{20,100}$/, /\b(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É)\b/i],
        timeLimit: 5000,
        preferredProviders: ['ConversationEngine-Semantic', 'Intelligent-Processor'],
        skipProviders: []
      },
      
      // –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (0.7-1.0)
      complex: {
        keywords: ['–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º'],
        patterns: [/^.{100,}$/, /\b(–∞–Ω–∞–ª–∏–∑|–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ|–ø—Ä–æ–µ–∫—Ç|—Å–∏—Å—Ç–µ–º–∞|–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)\b/i],
        timeLimit: 30000,
        preferredProviders: ['ConversationEngine-Semantic', 'Intelligent-Processor', 'Neural-Integration'],
        requireAllProviders: true,
        useNeural: true
      }
    };
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.specialCategories = {
      embroidery: {
        keywords: ['–≤—ã—à–∏–≤–∫–∞', 'dst', 'pes', 'jef', '–≤—ã—à–∏–≤–∞–ª—å–Ω–∞—è', '—Å—Ç–µ–∂–æ–∫'],
        complexity: 0.8,
        preferredProviders: ['ConversationEngine-Semantic'],
        useNeural: true
      },
      
      vectorization: {
        keywords: ['svg', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–≤–µ–∫—Ç–æ—Ä', '–∫–æ–Ω—Ç—É—Ä', 'path'],
        complexity: 0.7,
        preferredProviders: ['ConversationEngine-Semantic'],
        useNeural: false
      },
      
      generation: {
        keywords: ['—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–Ω–∞—Ä–∏—Å—É–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∫–∞—Ä—Ç–∏–Ω–∫–∞'],
        complexity: 0.6,
        preferredProviders: ['Intelligent-Processor'],
        useNeural: false
      },
      
      knowledge: {
        keywords: ['—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏'],
        complexity: 0.5,
        preferredProviders: ['ConversationEngine-Semantic'],
        useNeural: true
      }
    };
    
    this.isInitialized = true;
    SmartLogger.router('Semantic Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
   */
  async analyzeAndRoute(query, options = {}) {
    SmartLogger.router(`–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "${query.substring(0, 100)}${query.length > 100 ? '...' : ''}"`);
    
    try {
      // 1. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      const complexity = this.analyzeComplexity(query);
      SmartLogger.analysis(`–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${complexity.toFixed(2)}`);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const specialCategory = this.detectSpecialCategory(query);
      if (specialCategory) {
        SmartLogger.analysis(`–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${specialCategory.name}`);
      }
      
      // 3. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
      const routingStrategy = this.selectRoutingStrategy(complexity, specialCategory, options);
      SmartLogger.decision(`–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${routingStrategy.mode}`, routingStrategy);
      
      // 4. –°–æ–∑–¥–∞–Ω–∏–µ routing hints
      const routingHints = this.createRoutingHints(complexity, specialCategory, routingStrategy);
      
      const result = {
        complexity,
        specialCategory: specialCategory?.name || null,
        routingStrategy: routingStrategy.mode,
        routingHints,
        timestamp: new Date().toISOString(),
        processingTime: Date.now() - Date.now() // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
      };
      
      SmartLogger.router('–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', result);
      return result;
      
    } catch (error) {
      SmartLogger.router('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
      
      // Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
      return {
        complexity: 0.5,
        specialCategory: null,
        routingStrategy: 'standard',
        routingHints: {
          preferredProviders: ['ConversationEngine-Semantic'],
          timeLimit: 10000,
          useNeural: false,
          mode: 'standard'
        },
        error: error.message
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (0.0 - 1.0)
   */
  analyzeComplexity(query) {
    let complexity = 0.0;
    const lowerQuery = query.toLowerCase();
    
    // –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏–Ω–µ
    if (query.length < 20) complexity += 0.1;
    else if (query.length < 50) complexity += 0.3;
    else if (query.length < 100) complexity += 0.5;
    else complexity += 0.7;
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    Object.entries(this.complexityConfig).forEach(([level, config]) => {
      const keywordMatches = config.keywords.filter(keyword => 
        lowerQuery.includes(keyword)
      ).length;
      
      const patternMatches = config.patterns.filter(pattern => 
        pattern.test(query)
      ).length;
      
      if (keywordMatches > 0) {
        if (level === 'simple') complexity = Math.max(0.1, complexity - 0.2);
        else if (level === 'medium') complexity = Math.max(0.3, complexity);
        else if (level === 'complex') complexity = Math.max(0.7, complexity + 0.2);
      }
      
      if (patternMatches > 0) {
        if (level === 'simple') complexity = Math.max(0.1, complexity - 0.1);
        else if (level === 'medium') complexity = Math.max(0.3, complexity);
        else if (level === 'complex') complexity = Math.max(0.7, complexity + 0.1);
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const sentences = query.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const averageWordsPerSentence = query.split(/\s+/).length / Math.max(sentences.length, 1);
    
    if (averageWordsPerSentence > 15) complexity += 0.1;
    if (sentences.length > 3) complexity += 0.1;
    
    // –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (/[{}[\]()"]/.test(query)) complexity += 0.1;
    if (query.includes('```') || query.includes('```')) complexity += 0.2;
    
    return Math.min(1.0, Math.max(0.0, complexity));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   */
  detectSpecialCategory(query) {
    const lowerQuery = query.toLowerCase();
    
    for (const [categoryName, config] of Object.entries(this.specialCategories)) {
      const matches = config.keywords.filter(keyword => 
        lowerQuery.includes(keyword)
      ).length;
      
      if (matches > 0) {
        return {
          name: categoryName,
          ...config,
          matches
        };
      }
    }
    
    return null;
  }

  /**
   * –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
   */
  selectRoutingStrategy(complexity, specialCategory, options) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (specialCategory) {
      return {
        mode: 'specialized',
        category: specialCategory.name,
        complexity: specialCategory.complexity,
        reasoning: `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${specialCategory.name}`
      };
    }
    
    // –í—ã–±–æ—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (complexity < 0.3) {
      return {
        mode: 'express',
        complexity,
        reasoning: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
      };
    }
    
    if (complexity > 0.7) {
      return {
        mode: 'expert',
        complexity,
        reasoning: '–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é'
      };
    }
    
    return {
      mode: 'standard',
      complexity,
      reasoning: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ routing hints –¥–ª—è smart-router
   */
  createRoutingHints(complexity, specialCategory, routingStrategy) {
    const hints = {
      complexity,
      mode: routingStrategy.mode,
      preferredProviders: [],
      skipProviders: [],
      useNeural: false,
      timeLimit: 10000,
      reasoning: routingStrategy.reasoning
    };
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (specialCategory) {
      hints.preferredProviders = specialCategory.preferredProviders || [];
      hints.useNeural = specialCategory.useNeural || false;
      hints.timeLimit = specialCategory.timeLimit || 10000;
      return hints;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (complexity < 0.3) {
      hints.preferredProviders = ['Chat-Memory', 'ChatFree'];
      hints.skipProviders = ['ConversationEngine-Semantic', 'Neural-Integration'];
      hints.timeLimit = 1000;
      hints.useNeural = false;
    } else if (complexity < 0.7) {
      hints.preferredProviders = ['ConversationEngine-Semantic', 'Intelligent-Processor'];
      hints.timeLimit = 5000;
      hints.useNeural = false;
    } else {
      hints.preferredProviders = ['ConversationEngine-Semantic', 'Intelligent-Processor'];
      hints.requireAllProviders = true;
      hints.timeLimit = 30000;
      hints.useNeural = true;
    }
    
    return hints;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
   */
  getStats() {
    return {
      name: this.name,
      version: this.version,
      isInitialized: this.isInitialized,
      categoriesCount: Object.keys(this.specialCategories).length,
      complexityLevels: Object.keys(this.complexityConfig).length
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const globalSemanticRouter = new SemanticRouter();

// –≠–∫—Å–ø–æ—Ä—Ç—ã
module.exports = {
  SemanticRouter,
  globalSemanticRouter,
  analyzeAndRoute: (query, options) => globalSemanticRouter.analyzeAndRoute(query, options),
  analyzeComplexity: (query) => globalSemanticRouter.analyzeComplexity(query),
  getStats: () => globalSemanticRouter.getStats()
};

SmartLogger.router('Semantic Router –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');