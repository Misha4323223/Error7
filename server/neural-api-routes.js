/**
 * üöÄ NEURAL API ROUTES
 * REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é BOOOMERANGS
 */

const { initializeNeuralIntegration, getGlobalNeuralIntegration } = require('./neural-integration.cjs');

let neuralIntegration = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
(async () => {
  try {
    neuralIntegration = await initializeNeuralIntegration();
    console.log('üöÄ Neural API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Neural API:', error);
  }
})();

// –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –§–∞–∑—ã 2 - –≤—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑ setupNeuralRoutes
function assessPhase2Completion(stats) {
  const improvements = {
    layersUpgraded: stats.neural?.numLayers >= 12,
    ropeImplemented: stats.neural?.positionEncoding?.includes('RoPE'),
    memoryOptimized: stats.neural?.memoryOptimization?.includes('Checkpointing'),
    mixedPrecision: stats.neural?.precision?.includes('Mixed')
  };

  const completedCount = Object.values(improvements).filter(Boolean).length;
  const totalCount = Object.keys(improvements).length;
  const completionPercent = Math.round((completedCount / totalCount) * 100);

  return {
    improvements,
    completed: completedCount,
    total: totalCount,
    percentage: completionPercent,
    status: completionPercent === 100 ? '–§–∞–∑–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completionPercent}%`
  };
}

function setupNeuralRoutes(app) {
  // üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
  app.post('/api/neural/generate', async (req, res) => {
    try {
      const { input, options = {} } = req.body;

      if (!input) {
        return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–µ input' });
      }

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
      }

      const response = await neuralIntegration.generateHybridResponse(input, options);

      res.json({
        success: true,
        input,
        response,
        type: 'neural_hybrid',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ neural response:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞', 
        details: error.message 
      });
    }
  });

  // üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.get('/api/neural/stats', (req, res) => {
    try {
      const stats = neuralIntegration?.getSystemStats();

      if (!stats) {
        return res.status(503).json({ error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö
      const enhancedStats = {
        ...stats,
        improvements: {
          layers: stats.neural?.numLayers >= 12 ? '‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 12 —Å–ª–æ–µ–≤' : '‚è≥ –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
          positioning: stats.neural?.positionEncoding === 'RoPE (Rotary Position Embeddings)' ? 
            '‚úÖ RoPE –≤–∫–ª—é—á–µ–Ω' : '‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏',
          memory: stats.neural?.memoryOptimization === 'Gradient Checkpointing' ? 
            '‚úÖ Gradient checkpointing' : '‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–º—è—Ç—å',
          precision: stats.neural?.precision?.includes('Mixed') ? 
            '‚úÖ Mixed precision' : '‚è≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å'
        },
        phase2Status: assessPhase2Completion(stats)
      };

      res.json({
        success: true,
        stats: enhancedStats,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è neural stats:', error);
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 
        details: error.message 
      });
    }
  });

  // üî• –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/train', async (req, res) => {
    try {
      const { epochs = 3, batchSize = 4 } = req.body;

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const trainingPromise = neuralIntegration.trainNeuralNetwork({
        epochs,
        batchSize
      });

      res.json({
        success: true,
        message: '–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
        epochs,
        batchSize,
        timestamp: new Date().toISOString()
      });

      // –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
      trainingPromise.then(() => {
        console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è' });
    }
  });

  // üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  app.post('/api/neural/training-example', async (req, res) => {
    try {
      const { query, response, metadata = {} } = req.body;

      if (!query || !response) {
        return res.status(400).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è query –∏ response' });
      }

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
      }

      const success = await neuralIntegration.addTrainingExample(query, response, metadata);

      res.json({
        success,
        message: success ? '–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω' : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞' });
    }
  });

  // üéØ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/test', async (req, res) => {
    try {
      const testQueries = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ BOOOMERANGS?",
        "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞",
        "–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º"
      ];

      if (!neuralIntegration?.isInitialized) {
        return res.status(503).json({ error: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' });
      }

      const results = [];

      for (const query of testQueries) {
        try {
          const response = await neuralIntegration.generateHybridResponse(query);
          results.push({
            query,
            response,
            success: true
          });
        } catch (error) {
          results.push({
            query,
            error: error.message,
            success: false
          });
        }
      }

      res.json({
        success: true,
        testResults: results,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
    }
  });

  // üîÑ –†–µ—Å—Ç–∞—Ä—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  app.post('/api/neural/restart', async (req, res) => {
    try {
      if (neuralIntegration) {
        await neuralIntegration.shutdown();
      }

      neuralIntegration = await initializeNeuralIntegration();

      res.json({
        success: true,
        message: '–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏' });
    }
  });

  console.log('üîó Neural API routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

module.exports = { setupNeuralRoutes };