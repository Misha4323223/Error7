/**
 * üîÑ CUSTOM RoPE LAYER - Rotary Position Embeddings
 * –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RoPE –¥–ª—è TensorFlow.js –±–µ–∑ lambda layers
 */

const tf = require('@tensorflow/tfjs-node');

class RoPELayer extends tf.layers.Layer {
  constructor(config) {
    super(config);
    this.embeddingDim = config.embeddingDim;
    this.maxSeqLength = config.maxSeqLength;
    this.name = config.name || 'rope_layer';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ embedding dimension —á–µ—Ç–Ω–æ–µ
    if (this.embeddingDim % 2 !== 0) {
      throw new Error('Embedding dimension must be even for RoPE');
    }
    
    console.log(`‚úÖ RoPE Layer —Å–æ–∑–¥–∞–Ω: embeddingDim=${this.embeddingDim}, maxSeqLength=${this.maxSeqLength}`);
  }

  build(inputShape) {
    console.log('üîß Building RoPE Layer...');
    
    // –°–æ–∑–¥–∞–µ–º frequency weights –¥–ª—è RoPE
    const halfDim = Math.floor(this.embeddingDim / 2);
    
    this.freqWeights = this.addWeight(
      'rope_frequencies',
      [this.maxSeqLength, halfDim],
      'float32',
      tf.initializers.glorotUniform(),
      null,
      true // trainable
    );
    
    console.log(`‚úÖ RoPE weights created: [${this.maxSeqLength}, ${halfDim}]`);
    super.build(inputShape);
  }

  computeOutputShape(inputShape) {
    // RoPE –Ω–µ –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É embeddings
    return inputShape[0]; // –ü–µ—Ä–≤—ã–π input - embeddings
  }

  call(inputs, kwargs) {
    return tf.tidy(() => {
      const [embeddings, positions] = inputs;
      
      console.log('üîÑ Applying RoPE transformation...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
      const batchSize = embeddings.shape[0];
      const seqLength = embeddings.shape[1];
      const embeddingDim = embeddings.shape[2];
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      let positionIndices;
      if (positions) {
        positionIndices = positions;
      } else {
        positionIndices = tf.range(0, seqLength).expandDims(0).tile([batchSize, 1]);
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—ã
      const frequencies = tf.matMul(
        tf.cast(positionIndices, 'float32'),
        this.freqWeights.read()
      );
      
      // –°–æ–∑–¥–∞–µ–º cos/sin –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      const cosFreq = tf.cos(frequencies);
      const sinFreq = tf.sin(frequencies);
      
      // –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ –ø–æ–ª–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ embedding
      const cosExpanded = tf.concat([cosFreq, cosFreq], -1);
      const sinExpanded = tf.concat([sinFreq, sinFreq], -1);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º rotation
      const rotatedEmbeddings = tf.add(
        tf.mul(embeddings, cosExpanded),
        tf.mul(this.rotateHalf(embeddings), sinExpanded)
      );
      
      console.log('‚úÖ RoPE transformation applied');
      return rotatedEmbeddings;
    });
  }

  rotateHalf(x) {
    // –†–µ–∞–ª–∏–∑—É–µ—Ç rotation –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É embedding dimension
    const halfDim = Math.floor(this.embeddingDim / 2);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã
    const x1 = x.slice([0, 0, 0], [-1, -1, halfDim]);
    const x2 = x.slice([0, 0, halfDim], [-1, -1, halfDim]);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º [-x2, x1] –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    return tf.concat([tf.neg(x2), x1], -1);
  }

  getConfig() {
    const config = {
      embeddingDim: this.embeddingDim,
      maxSeqLength: this.maxSeqLength,
      name: this.name
    };
    const baseConfig = super.getConfig();
    return {...baseConfig, ...config};
  }

  static get className() {
    return 'RoPELayer';
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≤ TensorFlow.js
tf.serialization.registerClass(RoPELayer);

module.exports = { RoPELayer };