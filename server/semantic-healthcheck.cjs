
/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö 40+ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const { createLogger } = require('./semantic-logger.cjs');
const logger = createLogger('SEMANTIC-HEALTHCHECK');

class SemanticHealthChecker {
  constructor() {
    this.modules = new Map();
    this.lastCheck = null;
    this.checkInterval = 60000; // –£–í–ï–õ–ò–ß–ï–ù–û: 60 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 30
    this.baseInterval = 60000; // –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.maxInterval = 300000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (5 –º–∏–Ω—É—Ç)
    this.failureCount = 0; // –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    this.criticalModules = [
      'semantic-memory',
      'intelligent-processor',
      'semantic-integration-layer',
      'quantum-processor',
      'creative-engine',
      'emotional-matrix'
    ];
    
    this.startPeriodicChecks();
    logger.info('–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô
   */
  registerModule(name, moduleInstance, options = {}) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–æ–¥—É–ª—å —É–∂–µ
    if (this.modules.has(name)) {
      logger.debug(`–ú–æ–¥—É–ª—å ${name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º`);
    }
    
    const moduleData = {
      instance: moduleInstance,
      name: name,
      critical: options.critical || this.criticalModules.includes(name),
      lastHealth: null,
      healthHistory: [],
      errors: [],
      performanceMetrics: {
        averageResponseTime: 0,
        errorRate: 0,
        totalCalls: 1, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 1 –≤–º–µ—Å—Ç–æ 0 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        successfulCalls: 1 // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–∞—á–∏–Ω–∞–µ–º —Å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      },
      registeredAt: Date.now(),
      lastActivity: Date.now(),
      ...options
    };
    
    this.modules.set(name, moduleData);
    
    logger.info(`üìù –ú–æ–¥—É–ª—å ${name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫—Ä–∏—Ç–∏—á–Ω—ã–π: ${moduleData.critical})`);
    
    // –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    setTimeout(async () => {
      try {
        const health = await this.checkModuleHealth(name, moduleData);
        logger.debug(`üîç –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${name}: ${health.status}`);
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ${name}: ${error.message}`);
      }
    }, 1000);
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
   */
  registerBasicModules() {
    const basicModules = [
      { name: 'semantic-memory', path: './semantic-memory/index.cjs' },
      { name: 'intelligent-processor', path: './intelligent-chat-processor.cjs' },
      { name: 'semantic-integration', path: './semantic-integration-layer.cjs' }
    ];
    
    basicModules.forEach(({ name, path }) => {
      try {
        const moduleInstance = require(path);
        this.registerModule(name, moduleInstance, { 
          critical: true,
          source: 'basic_registration'
        });
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å ${name}: ${error.message}`);
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        this.registerModule(name, null, { 
          critical: true, 
          error: error.message,
          source: 'failed_registration'
        });
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π (ASYNC)
   */
  async checkSystemHealth() {
    const startTime = Date.now();
    const results = {
      status: 'healthy',
      timestamp: startTime,
      summary: {
        total: this.modules.size,
        healthy: 0,
        degraded: 0,
        critical: 0,
        unavailable: 0
      },
      modules: {},
      issues: [],
      recommendations: []
    };

    logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π');

    // –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è —Å Promise.allSettled
    const moduleChecks = Array.from(this.modules.entries()).map(async ([name, moduleData]) => {
      try {
        const moduleHealth = await this.checkModuleHealth(name, moduleData);
        return { name, moduleHealth, success: true };
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è ${name}:`, error);
        return {
          name,
          moduleHealth: {
            status: 'unavailable',
            error: error.message,
            issues: [`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`]
          },
          success: false
        };
      }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    const moduleResults = await Promise.allSettled(moduleChecks);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (const result of moduleResults) {
      if (result.status === 'fulfilled') {
        const { name, moduleHealth } = result.value;
        results.modules[name] = moduleHealth;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        switch (moduleHealth.status) {
          case 'healthy':
            results.summary.healthy++;
            break;
          case 'degraded':
            results.summary.degraded++;
            break;
          case 'critical':
            results.summary.critical++;
            break;
          case 'unavailable':
            results.summary.unavailable++;
            break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if (moduleHealth.issues && moduleHealth.issues.length > 0) {
          results.issues.push(...moduleHealth.issues.map(issue => ({
            module: name,
            issue: issue,
            critical: moduleHealth.critical || false
          })));
        }
      } else {
        // Promise –±—ã–ª rejected
        const name = 'unknown';
        results.modules[name] = {
          status: 'unavailable',
          error: 'Promise rejected',
          issues: ['–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è']
        };
        results.summary.unavailable++;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    if (results.summary.critical > 0 || results.summary.unavailable > 2) {
      results.status = 'critical';
    } else if (results.summary.degraded > 3 || results.summary.unavailable > 0) {
      results.status = 'degraded';
    } else if (results.summary.healthy === results.summary.total) {
      results.status = 'optimal';
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    results.recommendations = this.generateRecommendations(results);

    const checkDuration = Date.now() - startTime;
    results.checkDuration = checkDuration;

    this.lastCheck = results;

    logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${checkDuration}–º—Å: ${results.status} (${results.summary.healthy}/${results.summary.total} –º–æ–¥—É–ª–µ–π –∑–¥–æ—Ä–æ–≤—ã)`);

    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è (ASYNC)
   */
  async checkModuleHealth(name, moduleData) {
    const health = {
      name: name,
      status: 'healthy',
      critical: moduleData.critical,
      issues: [],
      metrics: {},
      lastChecked: Date.now()
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
      if (!moduleData.instance) {
        health.status = 'unavailable';
        health.issues.push('–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return health;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const perfMetrics = moduleData.performanceMetrics;
      if (perfMetrics.averageResponseTime > 8000) { // –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç —Å 5000 –¥–æ 8000–º—Å
        health.status = 'degraded';
        health.issues.push(`–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${perfMetrics.averageResponseTime}–º—Å`);
      }

      if (perfMetrics.errorRate > 0.15) { // –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç —Å 0.1 –¥–æ 0.15
        health.status = perfMetrics.errorRate > 0.4 ? 'critical' : 'degraded';
        health.issues.push(`–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${(perfMetrics.errorRate * 100).toFixed(1)}%`);
      }

      // –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥—É–ª—è
      if (typeof moduleData.instance.checkHealth === 'function') {
        try {
          const moduleSpecificHealth = await Promise.race([
            moduleData.instance.checkHealth(),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000)) // 3 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
          ]);
          
          if (moduleSpecificHealth && !moduleSpecificHealth.healthy) {
            health.status = 'degraded';
            health.issues.push(...(moduleSpecificHealth.issues || ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥—É–ª—è']));
          }
        } catch (error) {
          if (error.message !== 'Timeout') {
            health.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è: ${error.message}`);
          } else {
            health.issues.push('–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è (>3—Å–µ–∫)');
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–£–í–ï–õ–ò–ß–ï–ù –õ–ò–ú–ò–¢)
      if (moduleData.critical) {
        const memoryUsage = process.memoryUsage();
        if (memoryUsage.heapUsed > 800 * 1024 * 1024) { // –£–≤–µ–ª–∏—á–µ–Ω —Å 400MB –¥–æ 800MB
          health.status = 'degraded';
          health.issues.push(`–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${(memoryUsage.heapUsed / 1024 / 1024).toFixed(1)}MB`);
        }
      }

      health.metrics = {
        ...perfMetrics,
        memoryUsage: process.memoryUsage().heapUsed
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      moduleData.healthHistory.push({
        timestamp: Date.now(),
        status: health.status,
        issueCount: health.issues.length
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (moduleData.healthHistory.length > 100) {
        moduleData.healthHistory = moduleData.healthHistory.slice(-50);
      }

    } catch (error) {
      health.status = 'critical';
      health.issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è ${name}:`, error);
    }

    moduleData.lastHealth = health;
    return health;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  generateRecommendations(healthResults) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if (healthResults.summary.critical > 0) {
      recommendations.push({
        priority: 'high',
        action: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        details: `${healthResults.summary.critical} –º–æ–¥—É–ª–µ–π –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏`
      });
    }

    if (healthResults.summary.unavailable > 0) {
      recommendations.push({
        priority: 'medium',
        action: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π',
        details: `${healthResults.summary.unavailable} –º–æ–¥—É–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`
      });
    }

    if (healthResults.summary.degraded > 2) {
      recommendations.push({
        priority: 'medium',
        action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        details: `${healthResults.summary.degraded} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π`
      });
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    const memoryIssues = healthResults.issues.filter(i => i.issue.includes('–ø–∞–º—è—Ç–∏'));
    if (memoryIssues.length > 0) {
      recommendations.push({
        priority: 'medium',
        action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
        details: '–ù–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π —Å–æ–æ–±—â–∞—é—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–∞–º—è—Ç—å—é'
      });
    }

    const responseTimeIssues = healthResults.issues.filter(i => i.issue.includes('–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'));
    if (responseTimeIssues.length > 0) {
      recommendations.push({
        priority: 'low',
        action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
        details: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ'
      });
    }

    return recommendations;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
   */
  updateModuleMetrics(moduleName, responseTime, isError = false) {
    const moduleData = this.modules.get(moduleName);
    if (!moduleData) return;

    const metrics = moduleData.performanceMetrics;
    metrics.totalCalls++;

    if (!isError) {
      metrics.successfulCalls++;
    }

    metrics.errorRate = 1 - (metrics.successfulCalls / metrics.totalCalls);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    if (metrics.averageResponseTime === 0) {
      metrics.averageResponseTime = responseTime;
    } else {
      metrics.averageResponseTime = (metrics.averageResponseTime + responseTime) / 2;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏
    if (isError) {
      moduleData.errors.push({
        timestamp: Date.now(),
        responseTime: responseTime
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (moduleData.errors.length > 50) {
        moduleData.errors = moduleData.errors.slice(-25);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  getHealthStats() {
    return {
      lastCheck: this.lastCheck,
      totalModules: this.modules.size,
      criticalModules: Array.from(this.modules.values()).filter(m => m.critical).length,
      registeredModules: Array.from(this.modules.keys()),
      systemUptime: process.uptime(),
      memoryUsage: process.memoryUsage()
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å EXPONENTIAL BACKOFF
   */
  startPeriodicChecks() {
    const performCheck = async () => {
      try {
        const startTime = Date.now();
        await this.checkSystemHealth();
        const duration = Date.now() - startTime;
        
        // –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
        this.failureCount = 0;
        this.checkInterval = this.baseInterval;
        
        logger.debug(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}–º—Å, —Å–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ ${this.checkInterval/1000}—Å–µ–∫`);
        
      } catch (error) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º exponential backoff
        this.failureCount++;
        this.checkInterval = Math.min(
          this.baseInterval * Math.pow(2, this.failureCount),
          this.maxInterval
        );
        
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (#${this.failureCount}):`, error.message);
        logger.warn(`‚è∞ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ ${this.checkInterval/1000}—Å–µ–∫`);
      }
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      setTimeout(performCheck, this.checkInterval);
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(performCheck, 10000);
    
    logger.info(`üîÑ –ó–∞–ø—É—â–µ–Ω—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (–±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.baseInterval/1000}—Å–µ–∫, –º–∞–∫—Å: ${this.maxInterval/1000}—Å–µ–∫)`);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  selfDiagnostic() {
    const diagnostic = {
      timestamp: Date.now(),
      monitoringSystem: {
        status: 'operational',
        registeredModules: this.modules.size,
        lastCheckAge: this.lastCheck ? Date.now() - this.lastCheck.timestamp : null,
        issues: []
      }
    };

    if (this.modules.size === 0) {
      diagnostic.monitoringSystem.status = 'warning';
      diagnostic.monitoringSystem.issues.push('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    }

    if (diagnostic.monitoringSystem.lastCheckAge > 60000) { // 1 –º–∏–Ω—É—Ç–∞
      diagnostic.monitoringSystem.status = 'warning';
      diagnostic.monitoringSystem.issues.push('–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è');
    }

    return diagnostic;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const globalHealthChecker = new SemanticHealthChecker();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
globalHealthChecker.registerBasicModules = function() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    let semanticMemory, intelligentProcessor, semanticIntegration;
    
    try {
      semanticMemory = require('./semantic-memory/index.cjs');
      this.registerModule('semantic-memory', semanticMemory, { critical: true });
      logger.info('–ú–æ–¥—É–ª—å semantic-memory –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logger.warn('–ú–æ–¥—É–ª—å semantic-memory –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
    
    try {
      intelligentProcessor = require('./intelligent-chat-processor.cjs');
      this.registerModule('intelligent-processor', intelligentProcessor, { critical: true });
      logger.info('–ú–æ–¥—É–ª—å intelligent-processor –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logger.warn('–ú–æ–¥—É–ª—å intelligent-processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
    
    try {
      semanticIntegration = require('./semantic-integration-layer.cjs');
      this.registerModule('semantic-integration', semanticIntegration, { critical: true });
      logger.info('–ú–æ–¥—É–ª—å semantic-integration –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      logger.warn('–ú–æ–¥—É–ª—å semantic-integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
    
    logger.info('–õ–µ–Ω–∏–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ª–µ–Ω–∏–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π:', error.message);
    return false;
  }
};

// –ù–ï –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
logger.info('–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –≥–æ—Ç–æ–≤–∞ –∫ –ª–µ–Ω–∏–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π');

module.exports = {
  globalHealthChecker,
  SemanticHealthChecker
};
