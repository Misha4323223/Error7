/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç natural-language-generator
 */

console.log('üß† –ü–†–Ø–ú–û–ô –¢–ï–°–¢ NATURAL-LANGUAGE-GENERATOR');

async function testNLGDirect() {
  try {
    console.log('\nüì¶ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å natural-language-generator...');
    
    const NaturalLanguageGeneratorClass = require('./server/semantic-memory/natural-language-generator.cjs');
    console.log('‚úÖ –ö–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–∏–ø:', typeof NaturalLanguageGeneratorClass);
    
    const nlg = new NaturalLanguageGeneratorClass();
    console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω');
    
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º generateResponse...');
    
    const result = await nlg.generateResponse('–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å', {
      intent: '–∑–Ω–∞–Ω–∏–µ–≤—ã–π_–∑–∞–ø—Ä–æ—Å',
      emotion: 'neutral',
      style: 'friendly'
    });
    
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:');
    console.log('Response length:', result.response?.length || 0);
    console.log('Response preview:', result.response?.substring(0, 200));
    console.log('Contains "üî¨ –ù–∞—É–∫–∏:":', result.response?.includes('üî¨ –ù–∞—É–∫–∏:'));
    console.log('Contains "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!":', result.response?.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!'));
    console.log('Full response:', result.response);
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('‚ùå –°–¢–ï–ö:', error.stack?.substring(0, 500));
  }
}

testNLGDirect();