/**
 * –ë–´–°–¢–†–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

console.log('üîß –ë–´–°–¢–†–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´');

async function quickVerification() {
  try {
    console.log('1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏...');
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${Object.keys(semanticMemory).length}`);

    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');
    const semanticAnalyzer = require('./server/semantic-memory/semantic-analyzer.cjs');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç–æ–≤: ${Object.keys(semanticAnalyzer).length}`);

    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã...');
    const emotionalMatrix = require('./server/semantic-memory/emotional-semantic-matrix.cjs');
    console.log('‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç–æ–≤: ${Object.keys(emotionalMatrix).length}`);

    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const testResult = await semanticMemory.analyzeCompleteRequest("–ø—Ä–∏–≤–µ—Ç", {});
    console.log('‚úÖ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ runtime –æ—à–∏–±–æ–∫');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${testResult.confidence}, –≤—Ä–µ–º—è ${testResult.processingTime}–º—Å`);

    console.log('\nüéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!');
    console.log('‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

  } catch (error) {
    console.log('\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê:', error.message);
    console.log('üìÑ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç–µ–∫–∞:', error.stack?.substring(0, 300));
  }
}

quickVerification();