/**
 * –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ fallback –æ—Ç–≤–µ—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ
 */

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò');

async function testNewGenerationSystem() {
  try {
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º natural-language-generator...');
    
    // –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    const nlgModule = require('./server/semantic-memory/natural-language-generator.cjs');
    
    console.log('üîç –¢–∏–ø –º–æ–¥—É–ª—è:', typeof nlgModule);
    console.log('üîç –ö–ª—é—á–∏ –º–æ–¥—É–ª—è:', Object.keys(nlgModule));
    
    let generator;
    if (nlgModule.instance) {
      generator = nlgModule.instance;
    } else if (nlgModule.NaturalLanguageGenerator) {
      generator = new nlgModule.NaturalLanguageGenerator();
    } else if (typeof nlgModule === 'object' && nlgModule.generateResponse) {
      generator = nlgModule;
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞');
      return;
    }
    
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω');
    console.log('üîç –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', Object.getOwnPropertyNames(Object.getPrototypeOf(generator)).filter(name => name !== 'constructor'));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    if (generator.generateAdaptiveResponse) {
      console.log('\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –ù–û–í–´–ô generateAdaptiveResponse');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç thought
      const testThought = {
        userInput: '—Å—É—á–∫–∞',
        context: {},
        memoryInsights: {}
      };
      
      const result = generator.generateAdaptiveResponse(testThought);
      console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "—Å—É—á–∫–∞":', result);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï —Å—Ç–∞—Ä—ã–π fallback –æ—Ç–≤–µ—Ç
      if (result.includes('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º')) {
        console.log('‚ùå –í–°–ï –ï–©–ï –°–¢–ê–†–´–ô FALLBACK!');
      } else {
        console.log('‚úÖ –ù–û–í–´–ô –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢!');
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
      if (generator.detectEmotionalIntent) {
        const emotion = generator.detectEmotionalIntent('—Å—É—á–∫–∞');
        console.log('üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:', emotion);
      }
      
      if (generator.analyzeUserNeed) {
        const need = generator.analyzeUserNeed('—Å—É—á–∫–∞');
        console.log('üéØ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', need);
      }
      
    } else {
      console.log('‚ùå generateAdaptiveResponse –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('üìç Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNewGenerationSystem();