/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π –≤–æ –≤—Å–µ—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
 */

const fs = require('fs');
const path = require('path');

// –§–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const FILES_TO_FIX = [
  'server/conversation-engine.cjs',
  'server/conversation-engine-semantic-provider.cjs', 
  'server/semantic-integration-layer.cjs',
  'server/smart-router.js',
  'server/intelligent-chat-processor.cjs',
  'server/semantic-memory/index.cjs',
  'server/semantic-memory/natural-language-generator.cjs',
  'server/semantic-memory/meta-semantic-engine.cjs',
  'server/semantic-memory/emotional-semantic-matrix.cjs',
  'server/semantic-memory/user-profiler.cjs',
  'server/semantic-memory/semantic-analyzer.cjs',
  'server/semantic-memory/learning-system.cjs',
  'server/semantic-memory/user-memory-manager.cjs',
  'server/semantic-memory/visual-semantic-extensions.cjs',
  'server/semantic-healthcheck.cjs',
  'server/semantic-monitor-dashboard.cjs'
];

async function fixDuplicateDeclarations() {
  console.log('üîß –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –î–ï–ö–õ–ê–†–ê–¶–ò–ô');
  
  let totalFixed = 0;
  let totalFiles = 0;
  
  for (const filePath of FILES_TO_FIX) {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      continue;
    }
    
    totalFiles++;
    console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: ${filePath}`);
    
    try {
      let content = fs.readFileSync(filePath, 'utf8');
      let fixesInFile = 0;
      
      // –ù–∞–π–¥–µ–º –≤—Å–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const declarationRegex = /(?:^|\n)([ \t]*)(const|let|var|function|class)\s+(\w+)/g;
      const declarations = new Map();
      const duplicates = new Set();
      
      let match;
      while ((match = declarationRegex.exec(content)) !== null) {
        const varName = match[3];
        if (declarations.has(varName)) {
          duplicates.add(varName);
        } else {
          declarations.set(varName, {
            type: match[2],
            indentation: match[1],
            position: match.index
          });
        }
      }
      
      if (duplicates.size > 0) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏: ${Array.from(duplicates).join(', ')}`);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥—É–±–ª–∏–∫–∞—Ç
        for (const duplicateName of duplicates) {
          content = fixDuplicateVariable(content, duplicateName);
          fixesInFile++;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixesInFile} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π –≤ ${filePath}`);
        totalFixed += fixesInFile;
      } else {
        console.log(`‚úÖ –í —Ñ–∞–π–ª–µ ${filePath} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
  }
  
  console.log(`\nüìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
  console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`üîß –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixed}`);
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–¥–µ
 */
function fixDuplicateVariable(content, varName) {
  const lines = content.split('\n');
  let firstDeclaration = true;
  let fixedContent = '';
  
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –Ω—É–∂–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    const declarationRegex = new RegExp(`^([ \t]*)(const|let|var|function|class)\\s+${varName}\\b`);
    const match = line.match(declarationRegex);
    
    if (match) {
      if (firstDeclaration) {
        // –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        firstDeclaration = false;
        fixedContent += line + '\n';
      } else {
        // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
        const indentation = match[1];
        const declarationType = match[2];
        
        if (declarationType === 'function' || declarationType === 'class') {
          // –î–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          fixedContent += `${indentation}// –ò–°–ü–†–ê–í–õ–ï–ù–û: –î—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${declarationType} ${varName} –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ\n`;
          fixedContent += `${indentation}// ${line}\n`;
        } else {
          // –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
          const newLine = line.replace(declarationRegex, `$1${varName}`);
          fixedContent += newLine + '\n';
        }
      }
    } else {
      fixedContent += line + '\n';
    }
  }
  
  return fixedContent.slice(0, -1); // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π \n
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */
function fixSpecificIssues() {
  console.log('\nüéØ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º routes.ts - TypeScript —Ñ–∞–π–ª
  if (fs.existsSync('server/routes.ts')) {
    let content = fs.readFileSync('server/routes.ts', 'utf8');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –≤ TypeScript –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    content = content.replace(/const timestamp = new Date\(\)\.toISOString\(\);/g, (match, offset) => {
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ timestamp –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
      const beforeMatch = content.substring(0, offset);
      const functionBlocks = beforeMatch.split(/(?:app\.|router\.)/);
      const currentBlock = functionBlocks[functionBlocks.length - 1];
      
      if (currentBlock.includes('timestamp = new Date().toISOString()')) {
        return '// timestamp —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ';
      }
      return match;
    });
    
    fs.writeFileSync('server/routes.ts', content, 'utf8');
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ routes.ts');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
if (require.main === module) {
  fixDuplicateDeclarations()
    .then(() => {
      fixSpecificIssues();
      console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!');
    })
    .catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { fixDuplicateDeclarations, fixSpecificIssues };