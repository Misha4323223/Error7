/**
 * –¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ smart-router –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */

async function testRefactoredSmartRouter() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û SMART-ROUTER\n');

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π smart-router
    const smartRouter = await import('./server/smart-router.js');
    console.log('‚úÖ Smart-router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const semanticProvider = require('./server/conversation-engine-semantic-provider.cjs');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–û–í–ê–ô–î–ï–†–ê:');
    console.log(`‚Ä¢ –ò–º—è: ${semanticProvider.name}`);
    console.log(`‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${semanticProvider.priority}`);
    console.log(`‚Ä¢ –ú–µ—Ç–æ–¥ canHandle: ${typeof semanticProvider.canHandle}`);
    console.log(`‚Ä¢ –ú–µ—Ç–æ–¥ processRequest: ${typeof semanticProvider.processRequest}`);
    console.log(`‚Ä¢ –ú–µ—Ç–æ–¥ getChatResponse: ${typeof semanticProvider.getChatResponse}`);
    console.log(`‚Ä¢ –ú–µ—Ç–æ–¥ getInfo: ${typeof semanticProvider.getInfo}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    const providerInfo = semanticProvider.getInfo();
    console.log('\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–í–ê–ô–î–ï–†–ï:');
    console.log(`‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${providerInfo.description}`);
    console.log(`‚Ä¢ –°—Ç–∞—Ç—É—Å: ${providerInfo.status}`);
    console.log(`‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${providerInfo.capabilities.length} —Ñ—É–Ω–∫—Ü–∏–π`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º canHandle —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ó–ê–ü–†–û–°–û–í:');
    
    const testQueries = [
      { query: '–ø—Ä–∏–≤–µ—Ç', shouldHandle: true },
      { query: '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', shouldHandle: true },
      { query: '–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ Python', shouldHandle: false },
      { query: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞', shouldHandle: false },
      { query: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ JavaScript', shouldHandle: true },
      { query: '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', shouldHandle: false }
    ];

    for (const test of testQueries) {
      const canHandle = semanticProvider.canHandle(test.query);
      const status = canHandle === test.shouldHandle ? '‚úÖ' : '‚ùå';
      console.log(`${status} "${test.query}" ‚Üí canHandle: ${canHandle} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.shouldHandle})`);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê:');
    
    try {
      const testQuery = '–ø—Ä–∏–≤–µ—Ç';
      console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: "${testQuery}"`);
      
      const result = await semanticProvider.processRequest(testQuery, {});
      
      if (result && result.success) {
        console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ');
        console.log(`üìù –û—Ç–≤–µ—Ç: "${result.response.substring(0, 100)}..."`);
        console.log(`üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider}`);
        console.log(`‚ö° –í—Ä–µ–º—è: ${result.processingTime}–º—Å`);
        console.log(`üîß –ú–µ—Ç–æ–¥: ${result.method}`);
        console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}%`);
      } else {
        console.log('‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å');
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      }
      
    } catch (testError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', testError.message);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º smart-router
    console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SMART-ROUTER:');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      console.log(`‚Ä¢ getChatResponse: ${typeof smartRouter.getChatResponse}`);
      console.log(`‚Ä¢ getAIResponseWithSearch: ${typeof smartRouter.getAIResponseWithSearch}`);
      console.log(`‚Ä¢ routeMessage: ${typeof smartRouter.routeMessage}`);
      console.log(`‚Ä¢ analyzeMessage: ${typeof smartRouter.analyzeMessage}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ smart-router
      if (smartRouter.getChatResponse) {
        console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ smart-router...');
        
        const routerResult = await smartRouter.getChatResponse('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', {});
        
        if (routerResult && routerResult.success) {
          console.log('‚úÖ Smart-router –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ');
          console.log(`üìù –û—Ç–≤–µ—Ç: "${routerResult.response.substring(0, 100)}..."`);
          console.log(`üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${routerResult.provider}`);
          console.log(`üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${routerResult.systemHealth}`);
          console.log(`üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: ${routerResult.routedBy}`);
        } else {
          console.log('‚ö†Ô∏è Smart-router –≤–µ—Ä–Ω—É–ª fallback –∏–ª–∏ –æ—à–∏–±–∫—É');
          console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', routerResult);
        }
        
      } else {
        console.log('‚ùå –ú–µ—Ç–æ–¥ getChatResponse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ smart-router');
      }

    } catch (routerError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ smart-router:', routerError.message);
    }

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:');
    console.log('‚úÖ Smart-router —É–ø—Ä–æ—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º');
    console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞');
    console.log('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testRefactoredSmartRouter().catch(console.error);
}

module.exports = { testRefactoredSmartRouter };