/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–•–ê - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–Æ–©–ï–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 */

console.log('üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–•–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ BOOOMERANGS');

async function testFinalSuccess() {
  try {
    console.log('\nüì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É...');
    
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    const testQueries = [
      '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å',
      '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?',
      '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?'
    ];
    
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É...');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    for (let i = 0; i < testQueries.length; i++) {
      const query = testQueries[i];
      console.log(`\nüìã –¢–ï–°–¢ ${i + 1}: "${query}"`);
      
      try {
        const result = await semanticMemory.analyzeCompleteRequest(query, {
          userId: 'demo-user',
          includeAdvancedSemantics: true
        });
        
        const responseText = result.generatedResponse?.response || '–ù–ï–¢ –û–¢–í–ï–¢–ê';
        const responseLength = responseText.length;
        
        console.log(`‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${responseLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}%`);
        console.log(`‚úÖ NLG –º–æ–¥—É–ª—å: ${result.moduleStatus?.naturalLanguageGenerator || '–ù–ï–ò–ó–í–ï–°–¢–ù–û'}`);
        console.log(`‚úÖ –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞: "${responseText.substring(0, 100)}..."`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if (responseLength > 200 && result.responseGenerated) {
          console.log(`üéâ –¢–ï–°–¢ ${i + 1} –£–°–ü–ï–®–ï–ù!`);
        } else {
          console.log(`‚ùå –¢–ï–°–¢ ${i + 1} –ù–ï –ü–†–û–ô–î–ï–ù`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï ${i + 1}:`, error.message);
      }
    }
    
    console.log('\nüèÜ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ BOOOMERANGS –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê');
    console.log('‚úÖ Natural-language-generator –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
    console.log('‚úÖ –í—Å–µ 48 –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å–≤—è–∑–∫–µ');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('‚ùå –°–¢–ï–ö:', error.stack?.substring(0, 500));
  }
}

testFinalSuccess();