/**
 * –¢–µ—Å—Ç conversation-engine –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—à–∏–±–∫–∏
 */

async function testConversationEngine() {
  console.log('üîß –û–¢–õ–ê–î–ö–ê CONVERSATION-ENGINE');
  console.log('=' .repeat(50));
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º conversation-engine
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º conversation-engine...');
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    if (!conversationEngine) {
      console.log('‚ùå conversation-engine –ù–ï –ó–ê–ì–†–£–ñ–ï–ù');
      return false;
    }
    
    console.log('‚úÖ conversation-engine –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(conversationEngine));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º processUserInput
    if (typeof conversationEngine.processUserInput !== 'function') {
      console.log('‚ùå –ú–µ—Ç–æ–¥ processUserInput –ù–ï –ù–ê–ô–î–ï–ù');
      return false;
    }
    
    console.log('‚úÖ –ú–µ—Ç–æ–¥ processUserInput –Ω–∞–π–¥–µ–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testInput = "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–≥–æ–Ω—å?";
    const userContext = {
      userId: 'test-user',
      sessionId: 'test-session',
      conversationHistory: [],
      userProfile: null,
      sessionContext: {}
    };
    
    console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú processUserInput...');
    console.log(`üìù –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å: "${testInput}"`);
    console.log('‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: 15 —Å–µ–∫—É–Ω–¥');
    
    const processPromise = conversationEngine.processUserInput(testInput, userContext);
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (15 —Å–µ–∫)')), 15000);
    });
    
    try {
      const result = await Promise.race([processPromise, timeoutPromise]);
      
      console.log('\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
      
      if (result) {
        console.log(`  ‚Ä¢ reply: ${result.reply ? `"${result.reply.substring(0, 100)}..."` : 'undefined'}`);
        console.log(`  ‚Ä¢ confidence: ${result.confidence || 'undefined'}`);
        console.log(`  ‚Ä¢ quality: ${result.quality || 'undefined'}`);
        console.log(`  ‚Ä¢ metadata: ${result.metadata ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
        
        if (result.metadata) {
          console.log(`    ‚Ä¢ modulesUsed: ${result.metadata.modulesUsed || 'undefined'}`);
          console.log(`    ‚Ä¢ processingTime: ${result.metadata.processingTime || 'undefined'}`);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        if (result.reply && result.reply.includes('—Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–Ω–∞–Ω–∏—è')) {
          console.log('‚ùå –ü–û–õ–£–ß–ò–õ–ò FALLBACK –û–®–ò–ë–ö–£');
          console.log('üîç –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ catch –±–ª–æ–∫–µ');
          return false;
        } else {
          console.log('‚úÖ –ü–û–õ–£–ß–ò–õ–ò –ù–û–†–ú–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢');
          return true;
        }
        
      } else {
        console.log('‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢ NULL –ò–õ–ò UNDEFINED');
        return false;
      }
      
    } catch (processError) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ê –í processUserInput:');
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', processError.message);
      console.error('   –°—Ç–µ–∫:', processError.stack?.split('\n').slice(0, 8).join('\n'));
      
      // –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (processError.message.includes('Cannot read properties')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤—É null/undefined –æ–±—ä–µ–∫—Ç–∞');
      } else if (processError.message.includes('is not a function')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –í—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      } else if (processError.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è');
      } else {
        console.log('üîç –¢–ò–ü –û–®–ò–ë–ö–ò: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
      
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò:', error.message);
    console.error('‚ùå –°—Ç–µ–∫:', error.stack?.split('\n').slice(0, 5).join('\n'));
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
testConversationEngine()
  .then(success => {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–õ–ê–î–ö–ò CONVERSATION-ENGINE:');
    console.log('=' .repeat(50));
    
    if (success) {
      console.log('‚úÖ CONVERSATION-ENGINE –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û');
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ conversation-engine.processUserInput');
      console.log('üí° –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤ routes.ts –∏–ª–∏ smart-router');
    } else {
      console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –í CONVERSATION-ENGINE');
      console.log('üîß processUserInput –ø–∞–¥–∞–µ—Ç –≤ fallback');
      console.log('üí° –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ conversation-engine');
    }
    
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –û–¢–õ–ê–î–ö–ò:', error);
    process.exit(1);
  });