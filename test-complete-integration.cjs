/**
 * üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º Semantic Router ‚Üí Conversation Engine ‚Üí Neural Network
 */

const axios = require('axios');

async function testCompleteIntegration() {
  console.log('üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò HYBRID –°–ò–°–¢–ï–ú–ê');
  console.log('==========================================');
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  const baseUrl = 'http://localhost:5000';
  
  const testCases = [
    {
      name: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (Express —Ä–µ–∂–∏–º)',
      message: '–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞',
      expectedRouting: 'express',
      expectedNeural: false
    },
    {
      name: '–ó–Ω–∞–Ω–∏–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å (Standard —Ä–µ–∂–∏–º)',
      message: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      expectedRouting: 'standard',
      expectedNeural: false
    },
    {
      name: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—à–∏–≤–∫—É (Specialized —Ä–µ–∂–∏–º)',
      message: '—Å–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –≤—ã—à–∏–≤–∫–∏ —Å —Ä–æ–∑–∞–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ DST',
      expectedRouting: 'specialized',
      expectedNeural: true
    },
    {
      name: '–°–ª–æ–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (Expert —Ä–µ–∂–∏–º)',
      message: '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
      expectedRouting: 'expert',
      expectedNeural: true
    }
  ];
  
  let passedTests = 0;
  let totalTests = testCases.length;
  
  for (const testCase of testCases) {
    console.log(`\nüß™ –¢–ï–°–¢: ${testCase.name}`);
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${testCase.message.substring(0, 100)}${testCase.message.length > 100 ? '...' : ''}"`);
    
    try {
      const startTime = Date.now();
      
      const response = await axios.post(`${baseUrl}/api/ai/chat`, {
        message: testCase.message,
        userId: 'test-user',
        sessionId: 'test-session'
      });
      
      const processingTime = Date.now() - startTime;
      
      if (response.data.success) {
        console.log('‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢:');
        console.log(`üìä –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTime}–º—Å`);
        console.log(`üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response.data.provider}`);
        console.log(`üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${response.data.confidence}`);
        console.log(`üî¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${response.data.quality}`);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        if (response.data.routingInfo) {
          console.log(`üéØ Routing Info:`, {
            complexity: response.data.routingInfo.complexity,
            strategy: response.data.routingInfo.strategy,
            category: response.data.routingInfo.category
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        const responseLength = response.data.response?.length || 0;
        console.log(`üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${responseLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if (responseLength > 100) {
          console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π');
        } else {
          console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
        console.log(`üí¨ –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): "${response.data.response?.substring(0, 200)}${responseLength > 200 ? '...' : ''}"`);
        
        passedTests++;
      } else {
        console.log('‚ùå –û–®–ò–ë–ö–ê –í –û–¢–í–ï–¢–ï:', response.data.error);
      }
      
    } catch (error) {
      console.log('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê:', error.message);
      if (error.response) {
        console.log('üìä –°—Ç–∞—Ç—É—Å:', error.response.status);
        console.log('üìù –î–∞–Ω–Ω—ã–µ:', error.response.data);
      }
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log(`\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã API
  console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ API');
  console.log('============================');
  
  // –¢–µ—Å—Ç Semantic Router —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  try {
    const statsResponse = await axios.get(`${baseUrl}/api/semantic-router/stats`);
    console.log('‚úÖ Semantic Router Stats:', statsResponse.data.stats);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Semantic Router:', error.message);
  }
  
  // –¢–µ—Å—Ç Neural API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  try {
    const neuralResponse = await axios.post(`${baseUrl}/api/neural/generate`, {
      input: '—Ç–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏',
      options: { maxTokens: 50 }
    });
    console.log('‚úÖ Neural API —Ä–∞–±–æ—Ç–∞–µ—Ç:', neuralResponse.data.success);
  } catch (error) {
    console.log('‚ö†Ô∏è Neural API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testCompleteIntegration().catch(console.error);
}

module.exports = { testCompleteIntegration };