/**
 * –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
 * –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */

console.log('üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –û–¢–í–ï–¢–ê');

async function traceResponseSource() {
  try {
    console.log('\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine.processUserInput...');
    
    const conversationEngine = require('./server/conversation-engine.cjs');
    
    const result = await conversationEngine.processUserInput('–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å', {
      userId: 'test-user',
      sessionId: 'test-session'
    });
    
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢ CONVERSATION-ENGINE:');
    console.log('Response length:', result.reply?.length || 0);
    console.log('First 200 chars:', result.reply?.substring(0, 200));
    console.log('Contains "üî¨ –ù–∞—É–∫–∏:":', result.reply?.includes('üî¨ –ù–∞—É–∫–∏:'));
    console.log('Contains "—Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è":', result.reply?.includes('—Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è'));
    console.log('Full response:', result.reply);
    
    console.log('\nüìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:');
    console.log('Confidence:', result.confidence);
    console.log('Quality:', result.quality);
    console.log('Metadata approach:', result.metadata?.approach);
    console.log('System health:', result.metadata?.systemHealth?.score);
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('‚ùå –°–¢–ï–ö:', error.stack);
  }
}

traceResponseSource();