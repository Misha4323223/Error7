/**
 * –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

const path = require('path');

async function testModuleLoading() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...');
  
  const problematicModules = [
    'creative-semantic-engine',
    'external-knowledge-integrator',
    'learning-system',
    'meta-semantic-engine'
  ];
  
  let successCount = 0;
  let failureCount = 0;
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
  for (const moduleName of problematicModules) {
    try {
      console.log(`\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: ${moduleName}`);
      const module = require(path.join(__dirname, 'server', 'semantic-memory', `${moduleName}.cjs`));
      
      if (module && Object.keys(module).length > 0) {
        console.log(`‚úÖ ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        console.log(`   Exports: ${Object.keys(module).slice(0, 5).join(', ')}`);
        successCount++;
      } else {
        console.log(`‚ùå ${moduleName} –ø—É—Å—Ç`);
        failureCount++;
      }
    } catch (error) {
      console.log(`‚ùå ${moduleName} –æ—à–∏–±–∫–∞: ${error.message}`);
      failureCount++;
    }
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
  try {
    console.log(`\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è: index.cjs`);
    const mainModule = require(path.join(__dirname, 'server', 'semantic-memory', 'index.cjs'));
    
    const expectedFunctions = [
      'analyzeCompleteRequest',
      'analyzeCompleteRequestWithMeta', 
      'generateResponseWithRealModules',
      'getSystemStatistics',
      'moduleChecker'
    ];
    
    let mainModuleSuccess = true;
    for (const func of expectedFunctions) {
      if (typeof mainModule[func] === 'function' || typeof mainModule[func] === 'object') {
        console.log(`‚úÖ ${func} –¥–æ—Å—Ç—É–ø–µ–Ω`);
      } else {
        console.log(`‚ùå ${func} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        mainModuleSuccess = false;
      }
    }
    
    if (mainModuleSuccess) {
      console.log(`‚úÖ –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      successCount++;
    } else {
      console.log(`‚ùå –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã`);
      failureCount++;
    }
    
  } catch (error) {
    console.log(`‚ùå –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –æ—à–∏–±–∫–∞: ${error.message}`);
    failureCount++;
  }
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failureCount}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((successCount / (successCount + failureCount)) * 100).toFixed(1)}%`);
  
  return { successCount, failureCount };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testModuleLoading().then(result => {
  if (result.failureCount === 0) {
    console.log('\nüéâ –í–°–ï –ú–û–î–£–õ–ò –ó–ê–ì–†–£–ñ–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ó–ê–ì–†–£–ó–ö–û–ô –ú–û–î–£–õ–ï–ô');
  }
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
});