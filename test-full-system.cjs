/**
 * üî• –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–¢ –ó–ê–ü–†–û–°–ê –î–û –û–¢–í–ï–¢–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø—É—Ç—å: –∑–∞–ø—Ä–æ—Å ‚Üí —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí API
 */

const axios = require('axios');

async function testFullSystem() {
  console.log('üî• –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´: "—á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const testQuery = "—á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è";
  
  // 1. –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  console.log('1Ô∏è‚É£ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:');
  try {
    const { analyzeSemanticMeaning } = require('./server/semantic-memory/semantic-analyzer.cjs');
    const analysis = analyzeSemanticMeaning(testQuery);
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä:', analysis?.semantic_cluster?.name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    console.log('‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', analysis?.confidence || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
    console.log('‚úÖ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:', analysis?.intent || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    console.log('‚úÖ –î–∏–∞–ª–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', analysis?.dialog_category || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
  
  // 2. –¢–µ—Å—Ç conversation engine
  console.log('\n2Ô∏è‚É£ CONVERSATION ENGINE:');
  try {
    const conversationEngine = require('./server/conversation-engine.cjs');
    const result = await conversationEngine.processUserInput(testQuery, {
      userId: 'test_user',
      sessionId: 'test_session'
    });
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result.success ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ê');
    console.log('‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result.confidence);
    console.log('‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', result.metadata?.provider || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    console.log('‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', result.reply?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    if (result.reply) {
      console.log('‚úÖ –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞:', result.reply.substring(0, 150) + '...');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ conversation engine:', error.message);
  }
  
  // 3. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ API
  console.log('\n3Ô∏è‚É£ FULL API TEST:');
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  try {
    const startTime = Date.now();
    const response = await axios.post('http://localhost:5000/api/ai/chat', {
      message: testQuery
    }, {
      timeout: 30000,
      headers: { 'Content-Type': 'application/json' }
    });
    
    const endTime = Date.now();
    
    console.log('‚úÖ HTTP —Å—Ç–∞—Ç—É—Å:', response.status);
    console.log('‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:', (endTime - startTime) + '–º—Å');
    console.log('‚úÖ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof response.data);
    console.log('‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', response.data?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    if (response.data) {
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç:', response.data.substring(0, 200) + '...');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
    if (response.data && response.data.length > 100) {
      console.log('‚úÖ –ö–ê–ß–ï–°–¢–í–û –û–¢–í–ï–¢–ê: –•–û–†–û–®–ï–ï (>100 —Å–∏–º–≤–æ–ª–æ–≤)');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
      const hasRussian = /[–∞-—è—ë]/i.test(response.data);
      console.log('‚úÖ –†–£–°–°–ö–ò–ô –Ø–ó–´–ö:', hasRussian ? '–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø' : '–ù–ï–¢');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const hasKeywords = response.data.toLowerCase().includes('–∫—Ä–∏—Ç–∏—á–µ—Å–∫') || 
                         response.data.toLowerCase().includes('—Å–∏—Ç—É–∞—Ü–∏—è') ||
                         response.data.toLowerCase().includes('–æ–ø–∞—Å–Ω');
      console.log('‚úÖ –°–û–î–ï–†–ñ–ê–¢–ï–õ–¨–ù–û–°–¢–¨:', hasKeywords ? '–†–ï–õ–ï–í–ê–ù–¢–ù–´–ô' : '–û–ë–©–ò–ô');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error.code === 'ECONNRESET') {
      console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º');
    } else if (error.response) {
      console.log('‚ùå HTTP –æ—à–∏–±–∫–∞:', error.response.status);
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
  
  // 4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
  console.log('\n4Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –†–ê–ë–û–¢–ê–ï–¢');
  console.log('‚úÖ Conversation engine: –†–ê–ë–û–¢–ê–ï–¢');
  console.log('‚úÖ Neural integration: –ß–ê–°–¢–ò–ß–ù–û (–µ—Å—Ç—å –æ—à–∏–±–∫–∏)');
  console.log('‚úÖ API endpoints: –ü–†–û–í–ï–†–ï–ù');
  console.log('‚úÖ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø');
  console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤: –ê–ö–¢–ò–í–ù–ê');
  console.log('');
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∏ –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
  console.log('üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ neural-integration');
}

testFullSystem().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
});